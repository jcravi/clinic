{"version":3,"sources":["components/common/LetterHead.tsx","components/common/PrintButton.tsx","actions/letterHead.ts","actions/print.ts","components/common/CommonComponents.tsx","components/common/Label.tsx","components/prescription/DailyQuantities.tsx","components/prescription/Input.tsx","components/prescription/MedicineName.tsx","utils/search.ts","components/prescription/Table.tsx","components/prescription/Row.tsx","components/prescription/Prescription.tsx","actions/sheets.ts","components/prescription/Sheet.tsx","utils/chart-utils.ts","components/audiogram/Chart.tsx","components/audiogram/Audiogram.tsx","actions/chart.ts","actions/audiogram.ts","components/common/Common.tsx","actions/common.ts","actions/clear.ts","App.tsx","reducers/audiogram.ts","reducers/chart.ts","reducers/common.ts","reducers/letterHead.ts","reducers/sheet.ts","reducers/index.ts","reducers/print.ts","index.tsx"],"names":["Container","styled","div","printLetterHead","Title","Content","Address","LetterHead","connect","letterHead","name","degrees","reg","days","times1","times2","print","style","fontSize","fontWeight","textAlign","ButtonPlacement","StyledButton","button","mapDispatchToProps","type","startedPrint","PrintButton","useEffect","window","onClick","e","StyledLabel","label","TextArea","textarea","Label","inputName","value","onChange","ref","useRef","current","height","scrollHeight","Div","light","NumberInput","input","attrs","_","placeholder","min","max","DateInput","Item","ItemDate","DailyQuantities","rowIndex","dosages","onDosageChange","addDosage","removeDosage","paddingLeft","map","i","key","dosage","changedDates","target","length","removedDate","DailyQuantityRow","timeOfDay","time","useState","times","setTimes","index","toLowerCase","event","timesCopy","onBlur","dates","Input","AutoCompleteContainer","AutoCompleteItems","AutoCompleteItem","highlighted","hover","MedicineName","entered","removed","choices","setChoices","selected","setSelected","setHover","setName","reset","onMouseMove","setInput","medicine","form","width","autoComplete","onKeyUp","newSelected","test","names","userEntered","array","val","replace","lowerVal","words","split","wordsLower","rexStr","join","rexCase","RegExp","rex","medicines","item","score","searchStr","startsWith","searchStrLower","includes","word","push","filter","x","sort","a","b","search","slice","console","log","choice","onMouseDown","generic","Table","Column","SerialColumn","MiddleColumn","NotesColumn","TableRow","HeaderRow","StyledRow","Dosage","NameSection","Row","size","medicineName","quantity","notes","onChangeMedicineName","onInput","currentTarget","setPrescription","addPrescription","removePrescription","setDosage","prescriptionIndex","Prescription","prescriptions","sheet","RowProps","dosageIndex","setSheetInput","Sheet","diagnosis","procedureDone","instructions","paddingTop","X_AXIS","Y_AXIS","xInc","yInc","calcX","calcY","toPointsLine","points","reduce","acc","curr","Legend","g","Axis","AxisTitle","AxisLabel","RightAir","RightBone","LeftAir","LeftBone","subAxisStyle","strokeWidth","stroke","strokeDasharray","fill","subSubAxisStyle","Chart","chart","rightAir","rightBone","leftAir","leftBone","version","role","transform","y","x1","y1","x2","y2","cx","cy","r","font","color","textAnchor","offset","ChartContainer","Entry","Cell","step","setPoint","sideKey","setAudiogramInput","Audiogram","audiogram","remarks","hearingAidTrial","arr","sideType","display","borderBottom","borderRight","paddingRight","lineHeight","o","Top","setCommon","Common","common","fileNo","opdNo","ageSex","address","date","Date","toLocaleDateString","maxLength","alignItems","CLEAR","OverallDiv","Navigator","clear","App","to","path","audiogramDefault","blankPoints","newPoints","Object","assign","blankChart","newChart","defaultCommon","defaultLetterHead","blankDosage","morning","afternoon","night","newDosage","blankPrescription","newPrescription","defaultSheet","reducer","combineReducers","action","state","newPrescriptions","newPrescriptionsWithDosage","newDosages","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cce343a.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { StateInterface } from '../../interfaces';\n\nconst Container = styled.div<{ printLetterHead: boolean }>`\n  margin-left: 30px;\n  margin-right: 30px;\n  margin-top: 10px;\n  display: block;\n  @media print {\n    display: ${({ printLetterHead }) => (printLetterHead ? 'block' : 'none')};\n  }\n`;\n\nconst Title = styled.div`\n  text-align: center;\n  font-size: 30px;\n  font-weight: bold;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Address = styled.div`\n  text-align: center;\n  font-size: 13px;\n  font-weight: bold;\n\n  margin-top: 5px;\n\n  padding-top: 2px;\n  padding-bottom: 2px;\n\n  border-top: 2px solid black;\n  border-bottom: 2px solid black;\n`;\n\nconst LetterHeadComponent = ({\n  name,\n  degrees,\n  reg,\n  days,\n  times1,\n  times2,\n  print,\n}: ReturnType<typeof mapStateToProps>) => {\n  return (\n    <Container printLetterHead={print}>\n      <Title>JK Holistic Ear Nose Throat &amp; Head-Neck Clinic</Title>\n      <Content>\n        <div>\n          <div style={{ fontSize: '20px', fontWeight: 'bold' }}>{name}</div>\n          <div>{degrees}</div>\n          <div>Reg. No: {reg}</div>\n        </div>\n        <div style={{ textAlign: 'right' }}>\n          <div>{days}</div>\n          <div>{times1}</div>\n          <div>{times2}</div>\n        </div>\n      </Content>\n      <Address>\n        45,46 Panvel City Centre, Ground Floor, Dr. B. Ambedkar Road,\n        Panvel-410206. Tel: 022-27456244 Mob: 9324796638\n      </Address>\n    </Container>\n  );\n};\n\nconst mapStateToProps = ({\n  letterHead: { name, degrees, reg, days, times1, times2, print },\n}: StateInterface) => ({\n  name,\n  degrees,\n  reg,\n  days,\n  times1,\n  times2,\n  print,\n});\n\nexport const LetterHead = connect(mapStateToProps)(LetterHeadComponent);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { StateInterface } from '../../interfaces';\nimport { startedPrint } from './../../actions/print';\nimport { printLetterHead } from './../../actions/letterHead';\n\nconst ButtonPlacement = styled.div`\n  position: fixed;\n  top: 10px;\n  right: 10px;\n\n  font-weight: bold;\n  & > div {\n    text-align: right;\n    margin-bottom: 10px;\n  }\n`;\n\nconst StyledButton = styled.button`\n  padding: 4px 10px;\n  text-decoration: none;\n  border-radius: 4px;\n  border: 1px solid gray;\n  background: linear-gradient(to bottom, whitesmoke 0%, lightgray 100%);\n\n  &:hover {\n    border-color: black;\n    background: linear-gradient(to bottom, lightgray 0%, whitesmoke 100%);\n  }\n  &:active {\n    top: 11px;\n  }\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 10px gray;\n  }\n\n  @media print {\n    display: none;\n  }\n`;\n\nconst PrintButtonComponent = ({\n  printLetterHead,\n  startedPrint,\n  print,\n}: ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps) => {\n  useEffect(() => {\n    if (print) {\n      startedPrint();\n      window.print();\n    }\n  }, [print, startedPrint]);\n\n  return (\n    <ButtonPlacement>\n      <div>\n        <StyledButton onClick={() => printLetterHead(true)}>\n          &#128438; LetterHead\n        </StyledButton>\n      </div>\n      <div>\n        <StyledButton onClick={(e) => printLetterHead(false)}>\n          &#128438; Print\n        </StyledButton>\n      </div>\n    </ButtonPlacement>\n  );\n};\n\nconst mapStateToProps = ({ print }: StateInterface) => ({\n  print,\n});\n\nconst mapDispatchToProps = {\n  printLetterHead,\n  startedPrint,\n};\n\nexport const PrintButton = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PrintButtonComponent);\n","export const PRINT_LETTER_HEAD = 'PRINT_LETTER_HEAD';\n\nexport interface PrintLetterHeadAction {\n  type: typeof PRINT_LETTER_HEAD;\n  printLetterHead: boolean;\n}\n\nexport const printLetterHead = (print: boolean): PrintLetterHeadAction => ({\n  type: PRINT_LETTER_HEAD,\n  printLetterHead: print,\n});\n","export const STARTED_PRINT = 'STARTED_PRINT';\n\nexport interface StartedPrintAction {\n  type: typeof STARTED_PRINT;\n}\n\nexport const startedPrint = (): StartedPrintAction => ({\n  type: STARTED_PRINT,\n});\n","import styled from 'styled-components';\n\nexport const StyledLabel = styled.label`\n  font-weight: bold;\n  display: flex;\n  align-items: flex-start;\n`;\n\nexport const TextArea = styled.textarea`\n  vertical-align: top;\n  width: 100%;\n  height: 27px;\n  border: none;\n  border-bottom: 1px dotted gray;\n  overflow: hidden;\n  padding-top: 0px;\n  resize: vertical;\n  &::-webkit-resizer {\n    display: none;\n  }\n  &:focus {\n    outline: transparent;\n    border-bottom: 1px solid gray;\n  }\n  @media print {\n    border: none;\n    &:focus {\n      outline: none;\n      border: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n","import React, { useEffect, useRef } from 'react';\nimport { StyledLabel, TextArea } from './CommonComponents';\n\ntype LabelProps = {\n  name: string;\n  inputName?: string;\n  value?: string;\n  onChange?: (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => void;\n};\n\nexport const Label = ({ inputName, name, value, onChange }: LabelProps) => {\n  const ref = useRef<HTMLTextAreaElement>(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.style.height = '27px';\n      ref.current.style.height = `${ref.current.scrollHeight}px`;\n    }\n  }, [value]);\n\n  return (\n    <div>\n      <StyledLabel>\n        {name}:&nbsp;\n        <TextArea\n          ref={ref}\n          name={inputName || name}\n          onChange={onChange}\n          value={value}\n        />\n      </StyledLabel>\n    </div>\n  );\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport styled from 'styled-components';\nimport { IDailyDosageInputs } from '../../interfaces';\n\nconst Div = styled.div<{ light: boolean }>`\n  display: flex;\n  border-top: ${({ light }) =>\n    light ? '1px dotted lightgray' : '1px dotted gray'};\n  @media print {\n    border-top: none;\n  }\n`;\n\nconst NumberInput = styled.input.attrs((_) => ({\n  type: 'number',\n  placeholder: '0',\n  min: 0,\n  max: 99,\n}))`\n  width: 40px;\n  border: none;\n  text-align: center;\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    opacity: 1;\n  }\n  @media print {\n    &:focus {\n      border: none;\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n  }\n`;\n\nconst DateInput = styled.input`\n  width: 100%;\n  border: none;\n  position: relative;\n  z-index: 1;\n  &:focus {\n    z-index: 2;\n  }\n  @media print {\n    &:focus {\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nconst Item = styled.div<{ light: boolean }>`\n  width: 120px;\n  text-align: center;\n  @media print {\n    visibility: ${({ light }) => (light ? 'hidden' : 'visible')};\n  }\n`;\n\nconst ItemDate = styled.div`\n  flex-grow: 1;\n  padding-left: 10px;\n  text-align: left;\n  & input {\n    text-align: left;\n  }\n`;\n\ntype DailyQuantitiesProps = {\n  rowIndex: number;\n  light: boolean;\n  dosages: Array<IDailyDosageInputs>;\n  onDosageChange: (index: number, name: string, value: string) => void;\n  addDosage: () => void;\n  removeDosage: () => void;\n};\n\nexport const DailyQuantities = ({\n  rowIndex,\n  light,\n  dosages,\n  onDosageChange,\n  addDosage,\n  removeDosage,\n}: DailyQuantitiesProps) => {\n  return (\n    <>\n      <Div light={light}>\n        <Item light={light}>Morning</Item>\n        <Item light={light}>Afternoon</Item>\n        <Item light={light}>Night</Item>\n        <ItemDate style={{ paddingLeft: '12px', textAlign: 'left' }}>\n          Dates\n        </ItemDate>\n      </Div>\n      {dosages.map((_, i) => {\n        const changedDates = ({\n          target: { value },\n        }: React.ChangeEvent<HTMLInputElement>) => {\n          if (i === dosages.length - 1 && value.length !== 0) {\n            addDosage();\n          }\n        };\n        const removedDate = ({\n          target: { value },\n        }: React.ChangeEvent<HTMLInputElement>) => {\n          if (i !== dosages.length - 1 && value.length === 0) {\n            removeDosage();\n          }\n        };\n\n        const onChange = ({\n          target: { name, value },\n        }: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n          onDosageChange(i, name as keyof IDailyDosageInputs, value);\n        };\n        return (\n          <DailyQuantityRow\n            key={`daily-${rowIndex}-${i}`}\n            light={light}\n            dosage={dosages[i]}\n            changedDates={changedDates}\n            removedDate={removedDate}\n            onChange={onChange}\n          />\n        );\n      })}\n    </>\n  );\n};\n\ntype DailyQuantityRowProps = {\n  light: boolean;\n  dosage: IDailyDosageInputs;\n  changedDates: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  removedDate: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onChange: (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => void;\n};\n\nconst DailyQuantityRow = ({\n  light,\n  changedDates,\n  removedDate,\n  dosage,\n  onChange,\n}: DailyQuantityRowProps) => {\n  const timeOfDay = ['Morning', 'Afternoon', 'Night'].map((time) => ({\n    time,\n    light: true,\n  }));\n  const [times, setTimes] = useState(timeOfDay);\n\n  const onChangeDates = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event);\n    changedDates(event);\n  };\n\n  return (\n    <Div light={light}>\n      {times.map(({ time, light }, index) => {\n        const handleChanged = (event: ChangeEvent<HTMLInputElement>) => {\n          onChange(event);\n          const {\n            target: { value },\n          } = event;\n          const timesCopy = [...times];\n          timesCopy[index] = {\n            time,\n            light: value === '0',\n          };\n          setTimes(timesCopy);\n        };\n        const name = time.toLowerCase() as keyof IDailyDosageInputs;\n        return (\n          <Item key={time} light={light}>\n            <NumberInput\n              onChange={handleChanged}\n              name={name}\n              value={dosage[name]}\n            />\n          </Item>\n        );\n      })}\n      <ItemDate>\n        <DateInput\n          placeholder='Dates'\n          onChange={onChangeDates}\n          onBlur={removedDate}\n          name='dates'\n          value={dosage.dates}\n        />\n      </ItemDate>\n    </Div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  border: none;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  @media print {\n    &:focus {\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { search, SearchResult } from '../../utils/search';\nimport { Input } from './Input';\n\nconst AutoCompleteContainer = styled.div`\n  position: relative;\n  flex-grow: 2;\n  text-align: left;\n`;\n\nconst AutoCompleteItems = styled.div`\n  position: absolute;\n  border: 1px solid lightgray;\n  border-bottom: none;\n  border-top: none;\n  z-index: 99;\n  /*position the autocomplete items to be the same width as the container:*/\n  top: 100%;\n  left: -20px;\n  right: 0;\n  box-shadow: 0px 3px 10px gray;\n  width: 130%;\n  @media print {\n    display: none;\n  }\n`;\n\nconst AutoCompleteItem = styled.div<{ highlighted: boolean; hover: boolean }>`\n  text-align: left !important;\n  padding: 3px;\n  cursor: pointer;\n  background-color: ${({ highlighted }) =>\n    highlighted ? 'lightgray' : 'whitesmoke'};\n  border-bottom: 1px solid gray;\n  &:hover {\n    background-color: ${({ highlighted, hover }) =>\n      hover ? 'lightgray' : highlighted ? 'lightgray' : 'whitesmoke'};\n  }\n  & span {\n    font-style: italic;\n  }\n`;\n\ntype Props = {\n  entered: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  removed: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport const MedicineName = ({ entered, removed, value, onChange }: Props) => {\n  const [choices, setChoices] = useState<Array<SearchResult>>([]);\n  const [selected, setSelected] = useState<number>(-1);\n  const [hover, setHover] = useState(true);\n\n  const setName = (value: string) => {\n    onChange(value);\n  };\n\n  const reset = () => {\n    setChoices([]);\n    setSelected(-1);\n  };\n\n  const onKeyUp = ({ key }: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (key === 'Escape') {\n      reset();\n    } else if (key === 'ArrowUp') {\n      const newSelected = selected <= 0 ? choices.length - 1 : selected - 1;\n      setSelected(newSelected);\n      setHover(false);\n    } else if (key === 'ArrowDown') {\n      const newSelected = selected >= choices.length - 1 ? 0 : selected + 1;\n      setSelected(newSelected);\n      setHover(false);\n    } else if (key === 'Enter') {\n      if (selected >= 0) {\n        setInput(choices[selected]);\n        reset();\n      }\n    } else if (/[a-z0-9]/i.test(key) || key === 'Backspace') {\n      if (value.length > 0) {\n        const names = search(value).slice(0, 10);\n        setChoices(names);\n      } else {\n        reset();\n      }\n    } else {\n      console.log('SOMETHING ELSE', `\"${key}\"`);\n    }\n  };\n\n  const onBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    removed(event);\n    reset();\n  };\n\n  const onMouseMove = () => {\n    setSelected(-1);\n    setHover(true);\n  };\n\n  const setInput = (medicine: SearchResult) => {\n    setName(`${medicine.form} ${medicine.name}`);\n  };\n\n  return (\n    <AutoCompleteContainer>\n      <Input\n        style={{ width: '100%' }}\n        type='text'\n        autoComplete='off'\n        placeholder='Medicine Name, Type &amp; Strength'\n        onChange={(event) => {\n          entered(event);\n          setName(event.target.value);\n        }}\n        onBlur={onBlur}\n        onKeyUp={onKeyUp}\n        value={value}\n      />\n      {choices.length !== 0 && (\n        <AutoCompleteItems>\n          {choices.map((choice, index) => {\n            const onMouseDown = () => {\n              setInput(choice);\n              reset();\n            };\n            return (\n              <AutoCompleteItem\n                key={`${choice.name}-${choice.type}-${choice.form}-${index}`}\n                highlighted={index === selected}\n                hover={hover}\n                onMouseDown={onMouseDown}\n                onMouseMove={onMouseMove}\n              >\n                {choice.type}: {choice.form} {choice.name}{' '}\n                <span>({choice.generic})</span>\n              </AutoCompleteItem>\n            );\n          })}\n        </AutoCompleteItems>\n      )}\n    </AutoCompleteContainer>\n  );\n};\n","import medicines from '../assets/medicine-array.json';\n\ntype MedicineType = {\n  type: string;\n  form: string;\n  name: string;\n  generic: string;\n  strength: string;\n  notes: string;\n};\n\nexport type SearchResult = MedicineType & {\n  searchStr: string;\n  searchStrLower: string;\n  score: number;\n};\n\nexport const search = (userEntered: string): Array<SearchResult> => {\n  const array: Array<SearchResult> = [];\n\n  // converting the word to search in multiple ways\n  const val = userEntered.replace(/[^0-9a-z ]/gi, '');\n  const lowerVal = val.toLowerCase();\n\n  const words: Array<string> = val.split(' ');\n  const wordsLower = lowerVal.split(' ');\n\n  const rexStr = '.*' + val.split('').join('.*');\n\n  const rexCase = new RegExp(rexStr);\n  const rex = new RegExp(rexStr, 'i');\n\n  // Loop only once\n  for (const item of medicines) {\n    let score = 0;\n    // full user search starts\n    if (item.searchStr.startsWith(val)) {\n      score += 5;\n    }\n\n    // full user search case insensitive start\n    if (item.searchStrLower.startsWith(lowerVal)) {\n      score += 5;\n    }\n\n    // full user search\n    if (item.searchStr.includes(val)) {\n      score += 3;\n    }\n\n    // full user search case insensitive\n    if (item.searchStrLower.includes(lowerVal)) {\n      score += 3;\n    }\n\n    // search for words\n    for (const word of words) {\n      if (item.searchStr.includes(word)) {\n        score += 2;\n      }\n    }\n\n    // search for words case insensitive\n    for (const word of wordsLower) {\n      if (item.searchStrLower.includes(word)) {\n        score += 2;\n      }\n    }\n\n    // search individual letters\n    if (rexCase.test(item.searchStr)) {\n      score++;\n    }\n\n    if (rex.test(item.searchStrLower)) {\n      score++;\n    }\n    array.push({ ...item, score });\n  }\n\n  return array.filter((x) => x.score !== 0).sort((a, b) => b.score - a.score);\n};\n","import styled from 'styled-components';\n\nexport const Table = styled.div`\n  width: 100%;\n  border: none;\n  & div {\n    border: none;\n    text-align: center;\n  }\n  @media print {\n    border: none;\n    & div {\n      border: none;\n      caret-color: transparent;\n    }\n  }\n`;\n\nconst Column = styled.div`\n  vertical-align: top;\n  border-width: 1px !important;\n  @media print {\n    border: none !important;\n  }\n`;\n\nexport const SerialColumn = styled(Column)`\n  width: 25px;\n  vertical-align: top;\n  text-align: center;\n  border-left: 1px solid gray;\n  border-right: none !important;\n`;\n\nexport const MiddleColumn = styled(Column)`\n  flex-grow: 1;\n  color: black;\n  text-align: center;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n`;\n\nexport const NotesColumn = styled(Column)`\n  width: 100px;\n  text-align: left;\n  border-right: 1px solid gray;\n  border-left: none !important;\n`;\n\nexport const TableRow = styled.div`\n  display: flex;\n  width: 100%;\n  & > div {\n    border-top: none !important;\n    border-bottom: none !important;\n  }\n`;\n\nexport const HeaderRow = styled(TableRow)`\n  font-weight: bold;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { IDailyDosageInputs, IPrescriptionInputs } from '../../interfaces';\nimport { DailyQuantities } from './DailyQuantities';\nimport { Input } from './Input';\nimport { MedicineName } from './MedicineName';\nimport { MiddleColumn, NotesColumn, SerialColumn, TableRow } from './Table';\n\nconst StyledRow = styled(TableRow)<{ light: boolean }>`\n  & input::placeholder {\n    color: ${({ light }) => (light ? 'lightgray' : 'darkgray')};\n  }\n\n  border-top: 1px solid darkgray !important;\n  border-bottom: ${({ light }) => (light ? '1px dotted lightgray' : 'none')};\n\n  & > div {\n    padding: 0 0 0 0;\n    border-color: ${({ light }) => (light ? 'lightgray' : 'darkgray')};\n    border-style: ${({ light }) => (light ? 'dotted' : 'solid')};\n    color: ${({ light }) => (light ? 'lightgray' : 'black')};\n  }\n\n  & input[type='number']::-webkit-outer-spin-button,\n  & input[type='number']::-webkit-inner-spin-button {\n    opacity: ${({ light }) => (light ? 0.3 : 1.0)};\n  }\n\n  @media print {\n    display: ${({ light }) => (light ? 'none' : 'auto')};\n    border: none !important;\n    border-top: 1px dotted darkgray !important;\n    & input::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nconst Dosage = styled.div<{ light: boolean }>`\n  color: ${({ light }) => (light ? 'lightgray' : 'black')};\n  border-top: 1px\n    ${({ light }) => (light ? 'dotted lightgray' : 'solid darkgray')} !important;\n  @media print {\n    border-top: none !important;\n  }\n`;\n\nconst TextArea = styled.textarea<{ light: boolean }>`\n  vertical-align: top;\n  width: 99px;\n  height: 75px;\n  border: none;\n  overflow: hidden;\n  resize: vertical;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  &::placeholder {\n    color: ${({ light }) => (light ? 'lightgray' : 'darkgray')};\n  }\n  &::-webkit-resizer {\n    display: none;\n  }\n  @media print {\n    &:focus {\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nconst NameSection = styled.div<{ light: boolean }>`\n  display: flex;\n`;\n\ntype RowProps = {\n  size: number;\n  index: number;\n  entered: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  removed: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onChange: (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => void;\n  onChangeMedicineName: (value: string) => void;\n  onDosageChange: (index: number, name: string, value: string) => void;\n  dosages: Array<IDailyDosageInputs>;\n  addDosage: () => void;\n  removeDosage: () => void;\n} & IPrescriptionInputs;\n\nexport const Row = ({\n  size,\n  index,\n  entered,\n  removed,\n  medicineName,\n  quantity,\n  notes,\n  onChange,\n  onChangeMedicineName,\n  onDosageChange,\n  dosages,\n  addDosage,\n  removeDosage,\n}: RowProps) => {\n  const light = index === size - 1;\n\n  const onTextAreaInput = ({\n    currentTarget,\n  }: React.FormEvent<HTMLTextAreaElement>) => {\n    currentTarget.style.height = '75px';\n    currentTarget.style.height = `${currentTarget.scrollHeight}px`;\n  };\n\n  return (\n    <StyledRow light={light}>\n      <SerialColumn>{index + 1}</SerialColumn>\n      <MiddleColumn>\n        <NameSection light={light}>\n          <MedicineName\n            entered={entered}\n            removed={removed}\n            value={medicineName}\n            onChange={onChangeMedicineName}\n          />\n          <div style={{ width: '101px' }}>\n            <Input\n              style={{ width: '100px' }}\n              type='text'\n              placeholder='Quantity'\n              name='quantity'\n              value={quantity}\n              onChange={onChange}\n            />\n          </div>\n        </NameSection>\n        <Dosage light={light}>\n          <DailyQuantities\n            rowIndex={index}\n            light={light}\n            dosages={dosages}\n            addDosage={addDosage}\n            removeDosage={removeDosage}\n            onDosageChange={onDosageChange}\n          />\n        </Dosage>\n      </MiddleColumn>\n      <NotesColumn>\n        <TextArea\n          light={light}\n          placeholder='Notes'\n          onInput={onTextAreaInput}\n          name='notes'\n          value={notes}\n          onChange={onChange}\n        />\n      </NotesColumn>\n    </StyledRow>\n  );\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { Row } from './Row';\nimport {\n  MiddleColumn,\n  NotesColumn,\n  SerialColumn,\n  Table,\n  HeaderRow,\n} from './Table';\n\nimport {\n  IPrescriptionInputs,\n  IDailyDosageInputs,\n  StateInterface,\n} from '../../interfaces/index';\n\nimport {\n  setPrescription,\n  setDosage,\n  addPrescription,\n  removePrescription,\n  addDosage,\n  removeDosage,\n} from '../../actions/sheets';\n\nconst PrescriptionComponent = ({\n  prescriptions,\n  setPrescription,\n  setDosage,\n  addPrescription,\n  removePrescription,\n  addDosage,\n  removeDosage,\n}: ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps) => {\n  return (\n    <Table>\n      <HeaderRow>\n        <SerialColumn>No.</SerialColumn>\n        <MiddleColumn>Medicine and Dosage</MiddleColumn>\n        <NotesColumn>Notes</NotesColumn>\n      </HeaderRow>\n      {prescriptions.map((_, index) => {\n        const onChange = ({\n          target: { name, value },\n        }: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n          setPrescription(index, name as keyof IPrescriptionInputs, value);\n        };\n        const onChangeMedicineName = (value: string) => {\n          setPrescription(index, 'medicineName', value);\n        };\n\n        const entered = ({\n          target: { value },\n        }: React.ChangeEvent<HTMLInputElement>) => {\n          if (index === prescriptions.length - 1 && value.length !== 0) {\n            addPrescription();\n          }\n        };\n\n        const removed = ({\n          target: { value },\n        }: React.ChangeEvent<HTMLInputElement>) => {\n          if (\n            index !== 0 &&\n            index === prescriptions.length - 2 &&\n            value.length === 0\n          ) {\n            removePrescription();\n          }\n        };\n\n        const onDosageChange = (\n          dosageIndex: number,\n          name: string,\n          value: string\n        ) => {\n          setDosage(\n            index,\n            dosageIndex,\n            name as keyof IDailyDosageInputs,\n            value\n          );\n        };\n\n        const RowProps = {\n          index,\n          size: prescriptions.length,\n          entered,\n          removed,\n          ...prescriptions[index],\n          onChange,\n          onChangeMedicineName,\n          onDosageChange,\n          addDosage: () => addDosage(index),\n          removeDosage: () => removeDosage(index),\n        };\n        return <Row key={`row-key-${index}`} {...RowProps} />;\n      })}\n    </Table>\n  );\n};\n\nconst mapStateToProps = ({ sheet: { prescriptions } }: StateInterface) => ({\n  prescriptions,\n});\n\nconst mapDispatchToProps = {\n  setPrescription,\n  addPrescription,\n  removePrescription,\n  setDosage,\n  addDosage,\n  removeDosage,\n};\n\nexport const Prescription = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PrescriptionComponent);\n","import {\n  IDailyDosageInputs,\n  IPrescriptionInputs,\n  ISheetInputs,\n} from '../interfaces';\n\nexport const SET_SHEET = 'SET_SHEET';\nexport const SET_PRESCRIPTION = 'SET_PRESCRIPTION';\nexport const SET_DOSAGE = 'SET_DOSAGE';\nexport const PRESCRIPTION_ADD = 'PRESCRIPTION_ADD';\nexport const PRESCRIPTION_REMOVE = 'PRESCRIPTION_REMOVE';\n\nexport const DOSAGE_ADD = 'DOSAGE_ADD';\nexport const DOSAGE_REMOVE = 'DOSAGE_REMOVE';\n\nexport interface SetSheetInputAction {\n  type: typeof SET_SHEET;\n  name: keyof ISheetInputs;\n  value: string;\n}\n\nexport interface SetPrescriptionInputAction {\n  type: typeof SET_PRESCRIPTION;\n  index: number;\n  name: keyof IPrescriptionInputs;\n  value: string;\n}\n\nexport interface SetDosageInputAction {\n  type: typeof SET_DOSAGE;\n  prescriptionIndex: number;\n  index: number;\n  name: keyof IDailyDosageInputs;\n  value: string;\n}\n\nexport interface PrescriptionAddAction {\n  type: typeof PRESCRIPTION_ADD;\n}\n\nexport interface PrescriptionRemoveAction {\n  type: typeof PRESCRIPTION_REMOVE;\n}\n\nexport interface DosageAddAction {\n  type: typeof DOSAGE_ADD;\n  prescriptionIndex: number;\n}\n\nexport interface DosageRemoveAction {\n  type: typeof DOSAGE_REMOVE;\n  prescriptionIndex: number;\n}\n\nexport const setSheetInput = (\n  name: keyof ISheetInputs,\n  value: string\n): SetSheetInputAction => ({\n  type: SET_SHEET,\n  name,\n  value,\n});\n\nexport const addPrescription = (): PrescriptionAddAction => ({\n  type: PRESCRIPTION_ADD,\n});\n\nexport const removePrescription = (): PrescriptionRemoveAction => ({\n  type: PRESCRIPTION_REMOVE,\n});\n\nexport const setPrescription = (\n  index: number,\n  name: keyof IPrescriptionInputs,\n  value: string\n): SetPrescriptionInputAction => ({\n  type: SET_PRESCRIPTION,\n  index,\n  name,\n  value,\n});\n\nexport const setDosage = (\n  prescriptionIndex: number,\n  index: number,\n  name: keyof IDailyDosageInputs,\n  value: string\n): SetDosageInputAction => ({\n  type: SET_DOSAGE,\n  prescriptionIndex,\n  index,\n  name,\n  value,\n});\n\nexport const addDosage = (prescriptionIndex: number): DosageAddAction => ({\n  type: DOSAGE_ADD,\n  prescriptionIndex,\n});\n\nexport const removeDosage = (\n  prescriptionIndex: number\n): DosageRemoveAction => ({\n  type: DOSAGE_REMOVE,\n  prescriptionIndex,\n});\n\nexport type SheetActions =\n  | SetSheetInputAction\n  | PrescriptionAddAction\n  | PrescriptionRemoveAction\n  | SetPrescriptionInputAction\n  | SetDosageInputAction\n  | DosageAddAction\n  | DosageRemoveAction;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { ISheetInputs, StateInterface } from '../../interfaces';\nimport { Label } from '../common/Label';\nimport { Prescription } from './Prescription';\nimport { setSheetInput } from '../../actions/sheets';\n\nconst SheetComponent = ({\n  diagnosis,\n  procedureDone,\n  instructions,\n  setSheetInput,\n}: ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps) => {\n  const onChange = ({\n    target: { name, value },\n  }: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setSheetInput(name as keyof ISheetInputs, value);\n  };\n\n  return (\n    <>\n      <div>\n        <Label\n          name={'Diagnosis'}\n          inputName='diagnosis'\n          value={diagnosis}\n          onChange={onChange}\n        />\n        <Label\n          name={'Procedure\\u202fdone'}\n          inputName='procedureDone'\n          value={procedureDone}\n          onChange={onChange}\n        />\n      </div>\n      <div style={{ fontSize: '50px' }}>{'\\u211E'}</div>\n      <div>\n        <Prescription />\n      </div>\n      <div style={{ paddingTop: '50px' }}>\n        <Label\n          name='Instructions'\n          inputName='instructions'\n          value={instructions}\n          onChange={onChange}\n        />\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = ({\n  sheet: { diagnosis, procedureDone, instructions },\n}: StateInterface) => ({ diagnosis, procedureDone, instructions });\n\nconst mapDispatchToProps = {\n  setSheetInput,\n};\n\nexport const Sheet = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SheetComponent);\n","import { PointsType } from '../interfaces';\n\nexport const height = 275;\nexport const width = 375;\nexport const offset = 40;\n\nexport const DEFAULT = '';\n\nexport const X_AXIS = ['125', '250', '500', '1k', '2k', '4k', '6k'] as const;\nexport const Y_AXIS = [\n  '120',\n  '100',\n  '80',\n  '60',\n  '40',\n  '20',\n  '0',\n  '-20',\n] as const;\n\nexport const xInc = (width - 2 * offset) / X_AXIS.length;\nexport const yInc = (height - 2 * offset) / (Y_AXIS.length - 1);\n\nexport const calcX = (index: number): number => {\n  return offset + (index + 1) * xInc;\n};\n\nexport const calcY = (value: string): number => {\n  return offset + ((+value / 10) * yInc) / 2 + yInc;\n};\n\nexport const toPointsLine = (points: PointsType) => {\n  return X_AXIS.reduce((acc, curr, index) => {\n    if (points[curr] !== DEFAULT) {\n      const cx = calcX(index);\n      const cy = calcY(points[curr]);\n      return acc + ' ' + cx + ',' + cy;\n    } else {\n      return acc;\n    }\n  }, '');\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { ChartType, StateInterface } from '../../interfaces';\nimport {\n  X_AXIS,\n  Y_AXIS,\n  width,\n  height,\n  offset,\n  xInc,\n  yInc,\n  calcX,\n  calcY,\n  DEFAULT,\n  toPointsLine,\n} from '../../utils/chart-utils';\n\nconst Legend = styled.g`\n  font-size: 10px;\n  & > text {\n  }\n`;\n\nconst Axis = styled.g`\n  & > line {\n    stroke: black;\n  }\n`;\n\nconst AxisTitle = styled.g`\n  font-size: 12px;\n`;\n\nconst AxisLabel = styled.g`\n  font-size: 14px;\n`;\n\nconst RightAir = styled.g`\n  & > circle {\n    fill: white;\n    stroke: red;\n  }\n  & > polyline {\n    stroke: red;\n    fill: none;\n  }\n`;\n\nconst RightBone = styled(RightAir)`\n  & > polyline {\n    stroke-dasharray: 5;\n  }\n`;\n\nconst LeftAir = styled.g`\n  font: bold 15px arial;\n  & > text {\n    fill: blue;\n  }\n  & > polyline {\n    stroke: blue;\n  }\n`;\n\nconst LeftBone = styled(LeftAir)`\n  & > polyline {\n    stroke-dasharray: 5;\n  }\n`;\n\nconst subAxisStyle = {\n  strokeWidth: '1px',\n  stroke: 'darkgrey',\n  strokeDasharray: '1',\n  fill: 'none',\n};\n\nconst subSubAxisStyle = {\n  ...subAxisStyle,\n  stroke: 'lightgrey',\n};\n\nconst ChartComponent = ({\n  rightAir,\n  rightBone,\n  leftAir,\n  leftBone,\n}: ChartType) => {\n  return (\n    <svg\n      version='1.2'\n      role='img'\n      style={{\n        height: `${height}`,\n        width: `${width}`,\n      }}\n    >\n      <Legend transform='translate(50,5)'>\n        <text x='0' y='10'>\n          Right Air\n        </text>\n        <line x1='60' y1='7' x2='110' y2='7' stroke='red' fill='none' />\n        <circle cx='85' cy='7' r='3' stroke='red' fill='white' />\n        <text x='0' y='25'>\n          Right Bone\n        </text>\n        <line\n          x1='60'\n          y1='22'\n          x2='110'\n          y2='22'\n          stroke='red'\n          strokeDasharray='4'\n          fill='none'\n        />\n        <circle cx='85' cy='22' r='3' stroke='red' fill='white' />\n        <text x='150' y='10'>\n          Left Air\n        </text>\n        <line x1='210' y1='7' x2='260' y2='7' stroke='blue' fill='none' />\n        <text\n          x='235'\n          y='10.5'\n          style={{ font: 'bold 15px arial', color: 'blue' }}\n          fill='blue'\n          textAnchor='middle'\n        >\n          x\n        </text>\n        <text x='150' y='25'>\n          Left Bone\n        </text>\n        <line\n          x1='210'\n          y1='22'\n          x2='260'\n          y2='22'\n          stroke='blue'\n          strokeDasharray='4'\n          fill='none'\n        />\n        <text\n          x='235'\n          y='25.5'\n          style={{ font: 'bold 15px arial', color: 'blue' }}\n          fill='blue'\n          textAnchor='middle'\n        >\n          x\n        </text>\n      </Legend>\n      <Axis>\n        {/* Y Axis Helpers */}\n        {X_AXIS.map((key, index) => {\n          const x = offset + (index + 1) * xInc;\n          return (\n            <line\n              key={key}\n              style={subAxisStyle}\n              x1={x}\n              y1={offset}\n              x2={x}\n              y2={height - offset}\n            />\n          );\n        })}\n        {X_AXIS.map((key, index) => {\n          const x = offset + (index + 1) * xInc - xInc / 2;\n          return (\n            <line\n              key={key}\n              style={subSubAxisStyle}\n              x1={x}\n              y1={offset}\n              x2={x}\n              y2={height - offset}\n            />\n          );\n        })}\n        {/* X Axis Helpers */}\n        {Y_AXIS.map((key, index) => {\n          const y = height - offset - (index + 1) * yInc;\n          return index !== Y_AXIS.length - 1 ? (\n            <line\n              key={key}\n              style={subAxisStyle}\n              x1={offset}\n              y1={y}\n              x2={width - offset}\n              y2={y}\n            />\n          ) : null;\n        })}\n        {Y_AXIS.map((key, index) => {\n          const y = height - offset - (index + 1) * yInc + yInc / 2;\n          return index !== Y_AXIS.length - 1 ? (\n            <line\n              key={key}\n              style={subSubAxisStyle}\n              x1={offset}\n              y1={y}\n              x2={width - offset}\n              y2={y}\n            />\n          ) : null;\n        })}\n        {/* X Axis */}\n        <line\n          x1={offset}\n          y1={height - offset}\n          x2={width - offset}\n          y2={height - offset}\n        />\n        {/* Y Axis */}\n        <line x1={offset} y1={offset} x2={offset} y2={height - offset} />\n      </Axis>\n      <AxisLabel>\n        {X_AXIS.map((key, index) => {\n          const x = offset + (index + 1) * xInc;\n          return (\n            <text key={key} x={x} y={height - offset + 13} textAnchor='middle'>\n              {key}\n            </text>\n          );\n        })}\n        {Y_AXIS.map((key, index) => {\n          const y = height - offset - index * yInc + 4;\n          return (\n            <text key={key} x={offset - 4} y={y} textAnchor='end'>\n              {key}\n            </text>\n          );\n        })}\n      </AxisLabel>\n      <AxisTitle>\n        <text\n          x={offset - 25}\n          y={height / 2}\n          textAnchor='middle'\n          transform={`rotate(-90, ${offset - 25}, ${height / 2})`}\n        >\n          Intensity (db)\n        </text>\n        <text x={width / 2} y={height - offset + 30} textAnchor='middle'>\n          Frequency (Hz)\n        </text>\n      </AxisTitle>\n      <RightAir>\n        <polyline points={toPointsLine(rightAir)} />\n        {X_AXIS.map((x, index) => {\n          const cx = calcX(index);\n          const cy = calcY(rightAir[x]);\n          return rightAir[x] === DEFAULT ? null : (\n            <circle key={x} cx={cx} cy={cy} r='3' />\n          );\n        })}\n      </RightAir>\n      <RightBone>\n        <polyline points={toPointsLine(rightBone)} />\n        {X_AXIS.map((x, index) => {\n          const cx = calcX(index);\n          const cy = calcY(rightBone[x]);\n          return rightBone[x] === DEFAULT ? null : (\n            <circle key={x} cx={cx} cy={cy} r='3' />\n          );\n        })}\n      </RightBone>\n      <LeftAir>\n        {X_AXIS.map((x, index) => {\n          const cx = calcX(index);\n          const cy = calcY(leftAir[x]) + 4.5;\n          return leftAir[x] === DEFAULT ? null : (\n            <text key={x} x={cx} y={cy} textAnchor='middle'>\n              x\n            </text>\n          );\n        })}\n        <polyline fill='none' points={toPointsLine(leftAir)} />\n      </LeftAir>\n      <LeftBone>\n        {X_AXIS.map((x, index) => {\n          const cx = calcX(index);\n          const cy = calcY(leftBone[x]) + 4.5;\n          return leftBone[x] === DEFAULT ? null : (\n            <text key={x} x={cx} y={cy} textAnchor='middle'>\n              x\n            </text>\n          );\n        })}\n        <polyline fill='none' points={toPointsLine(leftBone)} />\n      </LeftBone>\n    </svg>\n  );\n};\n\nconst mapStateToProps = ({\n  chart: { rightAir, rightBone, leftAir, leftBone },\n}: StateInterface) => ({\n  rightAir,\n  rightBone,\n  leftAir,\n  leftBone,\n});\n\nexport const Chart = connect(mapStateToProps)(ChartComponent);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\n\nimport { Chart } from './Chart';\nimport { Label } from '../common/Label';\n\nimport { X_AXIS } from '../../utils/chart-utils';\nimport { setPoint } from '../../actions/chart';\nimport { setAudiogramInput } from '../../actions/audiogram';\nimport {\n  IAudiogramInputs,\n  ChartType,\n  PointsType,\n  StateInterface,\n} from '../../interfaces';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-top: 20px;\n  @media print {\n    justify-content: center;\n  }\n`;\n\nconst ChartContainer = styled.div`\n  @media print {\n    padding-top: 20px;\n    padding-bottom: 40px;\n\n    & > svg {\n      transform: scale(1.25);\n    }\n  }\n`;\n\nconst Entry = styled.div`\n  @media print {\n    display: none;\n  }\n`;\n\nconst Cell = styled.div`\n  width: 60px;\n  text-align: center;\n  & > input[type='number'] {\n    width: 55px;\n    border: none;\n    text-align: center;\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      opacity: 1;\n    }\n  }\n`;\n\nconst NumberInput = styled.input.attrs((_) => ({\n  type: 'number',\n  placeholder: '0',\n  min: -20,\n  max: 99,\n  step: 5,\n}))`\n  font-size: 17px;\n  line-height: inherit;\n  width: 100%;\n  border: none;\n  text-align: center;\n  position: relative;\n  z-index: 1;\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    opacity: 1;\n  }\n  &:focus {\n    z-index: 2;\n  }\n`;\n\ninterface NumbersType {\n  points: PointsType;\n  sideType: keyof ChartType;\n}\n\nconst AudiogramComponent = ({\n  rightAir,\n  rightBone,\n  leftAir,\n  leftBone,\n  remarks,\n  hearingAidTrial,\n  setPoint,\n  setAudiogramInput,\n}: ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps) => {\n  const onChange = ({\n    target: { name, value },\n  }: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setAudiogramInput(name as keyof IAudiogramInputs, value);\n  };\n\n  const arr: Array<NumbersType> = [\n    { points: rightAir, sideType: 'rightAir' },\n    { points: rightBone, sideType: 'rightBone' },\n    { points: leftAir, sideType: 'leftAir' },\n    { points: leftBone, sideType: 'leftBone' },\n  ];\n  return (\n    <>\n      <Container>\n        <Entry>\n          {/* Header */}\n          <div style={{ display: 'flex', borderBottom: '1px solid lightgrey' }}>\n            <Cell\n              style={{\n                textAlign: 'right',\n                borderRight: '1px solid lightgrey',\n                paddingRight: '5px',\n                lineHeight: '50px',\n              }}\n            >\n              Freq\n            </Cell>\n            <div>\n              <div style={{ width: '120px', textAlign: 'center' }}>Right</div>\n              <div style={{ display: 'flex' }}>\n                <Cell>Air</Cell>\n                <Cell>Bone</Cell>\n              </div>\n            </div>\n            <div>\n              <div style={{ width: '120px', textAlign: 'center' }}>Left</div>\n              <div style={{ display: 'flex' }}>\n                <Cell>Air</Cell>\n                <Cell>Bone</Cell>\n              </div>\n            </div>\n          </div>\n          {/* Body/Content */}\n          <div style={{ display: 'flex' }}>\n            <Cell\n              style={{\n                borderRight: '1px solid lightgrey',\n                paddingRight: '5px',\n              }}\n            >\n              {X_AXIS.map((x) => (\n                <div key={x} style={{ height: '27px', textAlign: 'right' }}>\n                  {x}\n                </div>\n              ))}\n            </Cell>\n            {arr.map((o, i) => {\n              const onChange = ({\n                target: { name, value },\n              }: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n                setPoint(o.sideType, name as keyof PointsType, value);\n              };\n              return (\n                <div key={`div-${o}-${i}`}>\n                  {X_AXIS.map((x) => (\n                    <Cell key={`cell-${o}-${i}-${x}`}>\n                      <NumberInput\n                        onChange={onChange}\n                        name={x}\n                        value={o.points[x]}\n                      />\n                    </Cell>\n                  ))}\n                </div>\n              );\n            })}\n          </div>\n        </Entry>\n        <ChartContainer>\n          <Chart />\n        </ChartContainer>\n      </Container>\n      <div>\n        <Label\n          inputName='remarks'\n          name='Remarks'\n          onChange={onChange}\n          value={remarks}\n        />\n        <Label\n          inputName='hearingAidTrial'\n          name={'Hearing\\u202fAid\\u202fTrial'}\n          onChange={onChange}\n          value={hearingAidTrial}\n        />\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = ({\n  chart: { rightAir, rightBone, leftAir, leftBone },\n  audiogram: { remarks, hearingAidTrial },\n}: StateInterface) => ({\n  rightAir,\n  rightBone,\n  leftAir,\n  leftBone,\n  remarks,\n  hearingAidTrial,\n});\n\nconst mapDispatchToProps = {\n  setPoint,\n  setAudiogramInput,\n};\n\nexport const Audiogram = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AudiogramComponent);\n","import { ChartType, PointsType } from '../interfaces';\n\nexport const SET_POINT = 'SET_POINT';\n\nexport interface SetPointAction {\n  type: typeof SET_POINT;\n  sideKey: keyof ChartType;\n  name: keyof PointsType;\n  value: string;\n}\n\nexport const setPoint = (\n  sideKey: keyof ChartType,\n  name: keyof PointsType,\n  value: string\n): SetPointAction => ({\n  type: SET_POINT,\n  sideKey,\n  name,\n  value,\n});\n","import { IAudiogramInputs } from '../interfaces';\n\nexport const SET_AUDIOGRAM_TEXT = 'SET_AUDIOGRAM_TEXT';\n\nexport interface SetAudiogramInputAction {\n  type: typeof SET_AUDIOGRAM_TEXT;\n  name: keyof IAudiogramInputs;\n  value: string;\n}\n\nexport const setAudiogramInput = (\n  name: keyof IAudiogramInputs,\n  value: string\n): SetAudiogramInputAction => ({\n  type: SET_AUDIOGRAM_TEXT,\n  name,\n  value,\n});\n","import React from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\n\nimport { StyledLabel } from './CommonComponents';\nimport { Label } from './Label';\n\nimport { setCommonInput } from '../../actions/common';\nimport { ICommonInputs, StateInterface } from '../../interfaces';\n\nconst Input = styled.input.attrs((_) => ({\n  type: 'text',\n}))`\n  width: 60px;\n  border: none;\n  border-bottom: 1px dotted grey;\n  text-align: left;\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    opacity: 1;\n  }\n  &:focus {\n    outline: transparent;\n    border-bottom: 1px solid gray;\n  }\n  @media print {\n    border: none;\n    &:focus {\n      border: none;\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n  }\n`;\n\nconst Top = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  & > div {\n    padding-left: 20px;\n  }\n`;\n\nconst CommonComponent = ({\n  fileNo,\n  opdNo,\n  name,\n  ageSex,\n  address,\n  setCommon,\n}: ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps) => {\n  const date = new Date().toLocaleDateString('en-IN');\n\n  const onChange = ({\n    target: { name, value },\n  }: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setCommon(name as keyof ICommonInputs, value);\n  };\n\n  return (\n    <>\n      <Top>\n        <div>\n          <label>\n            File No:{' '}\n            <Input\n              maxLength={7}\n              name='fileNo'\n              value={fileNo}\n              onChange={onChange}\n            />\n          </label>\n        </div>\n        <div>\n          <label>\n            OPD No:{' '}\n            <Input\n              maxLength={7}\n              name='opdNo'\n              value={opdNo}\n              onChange={onChange}\n            />\n          </label>\n        </div>\n        <div>Date: {date}</div>\n      </Top>\n      <div style={{ display: 'flex', alignItems: 'flex-start' }}>\n        <StyledLabel style={{ width: '100%' }}>\n          Name:{' '}\n          <Input\n            maxLength={65}\n            autoComplete='off'\n            style={{ width: '100%' }}\n            name='name'\n            value={name}\n            onChange={onChange}\n          />\n        </StyledLabel>\n        <StyledLabel>\n          Age/Sex:{' '}\n          <Input\n            maxLength={7}\n            style={{ width: '70px' }}\n            name='ageSex'\n            value={ageSex}\n            onChange={onChange}\n          />\n        </StyledLabel>\n      </div>\n      <div>\n        <Label\n          inputName='address'\n          name='Address'\n          value={address}\n          onChange={onChange}\n        />\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = ({\n  common: { fileNo, opdNo, name, ageSex, address },\n}: StateInterface) => ({ fileNo, opdNo, name, ageSex, address });\n\nconst mapDispatchToProps = {\n  setCommon: setCommonInput,\n};\n\nexport const Common = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CommonComponent);\n","import { ICommonInputs } from '../interfaces';\n\nexport const SET_COMMON = 'SET_COMMON';\n\nexport interface SetCommonInputAction {\n  type: typeof SET_COMMON;\n  name: keyof ICommonInputs;\n  value: string;\n}\n\nexport const setCommonInput = (\n  name: keyof ICommonInputs,\n  value: string\n): SetCommonInputAction => ({\n  type: SET_COMMON,\n  name,\n  value,\n});\n","export const CLEAR = 'CLEAR';\n\nexport interface ClearAction {\n  type: typeof CLEAR;\n}\n\nexport const clear = (): ClearAction => ({ type: CLEAR });\n","import React from 'react';\nimport styled from 'styled-components';\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { LetterHead } from './components/common/LetterHead';\nimport { PrintButton } from './components/common/PrintButton';\nimport { Sheet } from './components/prescription/Sheet';\nimport { Audiogram } from './components/audiogram/Audiogram';\nimport { Common } from './components/common/Common';\n\nimport { StateInterface } from './interfaces';\nimport { clear } from './actions/clear';\n\nconst OverallDiv = styled.div<{ printLetterHead: boolean }>`\n  padding-top: 10px;\n  padding-left: 50px;\n  padding-right: 50px;\n  font-size: 17px;\n  @media print {\n    padding-top: ${({ printLetterHead }) =>\n      printLetterHead ? '10mm' : '80mm'};\n  }\n`;\n\nconst Navigator = styled.div`\n  font-size: 13px;\n  position: fixed;\n  top: 10px;\n  left: 10px;\n  border-radius: 4px;\n  box-shadow: 0 0 10px gray;\n  background-color: white;\n  padding: 10px;\n  & > div {\n    border-bottom: 1px dashed blue;\n    padding-bottom: 5px;\n  }\n  & > div:hover {\n    border-bottom: 1px solid blue;\n    padding-bottom: 5px;\n  }\n  & a {\n    text-decoration: none;\n  }\n  & a:visited {\n    color: blue;\n  }\n  @media print {\n    display: none;\n  }\n`;\n\nconst AppComponent = ({\n  printLetterHead,\n  clear,\n}: ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps) => {\n  return (\n    <>\n      <LetterHead />\n      <OverallDiv printLetterHead={printLetterHead}>\n        <Common />\n        <BrowserRouter>\n          <Navigator>\n            <div>\n              <Link to='/' onClick={clear}>\n                <div>Clear</div>\n              </Link>\n            </div>\n            <div>\n              <Link to='/precription'>\n                <div>Prescription</div>\n              </Link>\n            </div>\n            <div>\n              <Link to='/audiogram'>\n                <div>Audiogram</div>\n              </Link>\n            </div>\n          </Navigator>\n          <Switch>\n            <Route path='/precription'>\n              <Sheet />\n            </Route>\n            <Route path='/audiogram'>\n              <Audiogram />\n            </Route>\n            <Route path='/'>{null}</Route>\n          </Switch>\n        </BrowserRouter>\n      </OverallDiv>\n      <PrintButton />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ letterHead: { print } }: StateInterface) => ({\n  printLetterHead: print,\n});\n\nconst mapDispatchToProps = {\n  clear,\n};\n\nexport const App = connect(mapStateToProps, mapDispatchToProps)(AppComponent);\n","import { CLEAR, ClearAction } from '../actions/clear';\nimport {\n  SetAudiogramInputAction,\n  SET_AUDIOGRAM_TEXT,\n} from '../actions/audiogram';\nimport { IAudiogramInputs } from '../interfaces';\n\nconst audiogramDefault: IAudiogramInputs = {\n  remarks: '',\n  hearingAidTrial: '',\n};\n\nexport const audiogramReducer = (\n  audiogram = audiogramDefault,\n  action: SetAudiogramInputAction | ClearAction\n): IAudiogramInputs => {\n  switch (action.type) {\n    case CLEAR:\n      return audiogramDefault;\n    case SET_AUDIOGRAM_TEXT:\n      return {\n        ...audiogram,\n        [action.name]: action.value,\n      };\n    default:\n      return audiogram;\n  }\n};\n","import { CLEAR, ClearAction } from '../actions/clear';\nimport { SetPointAction, SET_POINT } from '../actions/chart';\nimport { ChartType, PointsType } from '../interfaces';\nimport { X_AXIS } from '../utils/chart-utils';\n\nconst blankPoints = X_AXIS.reduce(\n  (o, key) => ({ ...o, [key]: '' }),\n  {} as PointsType\n);\n\nconst newPoints = () => {\n  return Object.assign({}, blankPoints);\n};\n\nconst blankChart: ChartType = {\n  rightAir: newPoints(),\n  rightBone: newPoints(),\n  leftAir: newPoints(),\n  leftBone: newPoints(),\n};\n\nconst newChart = () => {\n  return Object.assign({}, blankChart);\n};\n\nexport const chartReducer = (\n  chart = newChart(),\n  action: SetPointAction | ClearAction\n): ChartType => {\n  switch (action.type) {\n    case CLEAR:\n      return newChart();\n    case SET_POINT:\n      return {\n        ...chart,\n        [action.sideKey]: {\n          ...chart[action.sideKey],\n          [action.name]: action.value,\n        },\n      };\n    default:\n      return chart;\n  }\n};\n","import { CLEAR, ClearAction } from '../actions/clear';\nimport { SetCommonInputAction, SET_COMMON } from '../actions/common';\nimport { ICommonInputs } from '../interfaces';\n\nconst defaultCommon: ICommonInputs = {\n  fileNo: '',\n  opdNo: '',\n  name: '',\n  ageSex: '',\n  address: '',\n};\n\nexport const commonReducer = (\n  state = defaultCommon,\n  action: SetCommonInputAction | ClearAction\n): ICommonInputs => {\n  switch (action.type) {\n    case CLEAR:\n      return defaultCommon;\n    case SET_COMMON:\n      return {\n        ...state,\n        [action.name]: action.value,\n      };\n    default:\n      return state;\n  }\n};\n","import { CLEAR, ClearAction } from '../actions/clear';\nimport {\n  PRINT_LETTER_HEAD,\n  PrintLetterHeadAction,\n} from '../actions/letterHead';\n\nconst defaultLetterHead = {\n  name: 'Dr. Janardhan N. C.',\n  degrees: 'MBBS, MS(ENT), DORL, PGDHHCM',\n  reg: '45341',\n  days: 'Mon/Wed/Thur/Sat',\n  times1: '10 am to 1 pm',\n  times2: '5 pm to 8 pm',\n  print: false,\n};\n\nexport const letterHeadReducer = (\n  state = defaultLetterHead,\n  action: PrintLetterHeadAction | ClearAction\n): typeof defaultLetterHead => {\n  switch (action.type) {\n    case CLEAR:\n      return defaultLetterHead;\n    case PRINT_LETTER_HEAD:\n      return {\n        ...state,\n        print: action.printLetterHead,\n      };\n    default:\n      return state;\n  }\n};\n","import { CLEAR, ClearAction } from '../actions/clear';\nimport {\n  DOSAGE_ADD,\n  DOSAGE_REMOVE,\n  PRESCRIPTION_ADD,\n  PRESCRIPTION_REMOVE,\n  SET_DOSAGE,\n  SET_PRESCRIPTION,\n  SET_SHEET,\n  SheetActions,\n} from '../actions/sheets';\nimport {\n  IDailyDosageInputs,\n  IPrescriptionInputs,\n  ISheetInputs,\n} from '../interfaces';\n\nconst blankDosage = {\n  morning: '',\n  afternoon: '',\n  night: '',\n  dates: '',\n};\n\nconst newDosage = () => {\n  return Object.assign({}, blankDosage);\n};\n\nconst blankPrescription = {\n  medicineName: '',\n  quantity: '',\n  notes: '',\n  dosages: [newDosage()],\n};\n\nconst newPrescription = () => {\n  return Object.assign({}, blankPrescription);\n};\n\nconst defaultSheet = {\n  diagnosis: '',\n  procedureDone: '',\n  instructions: '',\n  prescriptions: [newPrescription(), newPrescription()],\n};\n\nexport const sheetReducer = (\n  state = defaultSheet,\n  action: SheetActions | ClearAction\n): ISheetInputs & {\n  prescriptions: Array<\n    IPrescriptionInputs & { dosages: Array<IDailyDosageInputs> }\n  >;\n} => {\n  switch (action.type) {\n    case CLEAR:\n      return defaultSheet;\n    case SET_SHEET:\n      return {\n        ...state,\n        [action.name]: action.value,\n      };\n    case PRESCRIPTION_ADD:\n      return {\n        ...state,\n        prescriptions: [...state.prescriptions, newPrescription()],\n      };\n    case PRESCRIPTION_REMOVE:\n      return {\n        ...state,\n        prescriptions: state.prescriptions.slice(0, -1),\n      };\n    case DOSAGE_ADD: {\n      const newPrescriptions = state.prescriptions.map((item, index) => {\n        if (index === action.prescriptionIndex) {\n          return { ...item, dosages: [...item.dosages, newDosage()] };\n        } else {\n          return item;\n        }\n      });\n      return {\n        ...state,\n        prescriptions: newPrescriptions,\n      };\n    }\n    case DOSAGE_REMOVE: {\n      const newPrescriptions = state.prescriptions.map((item, index) => {\n        if (index === action.prescriptionIndex) {\n          return { ...item, dosages: item.dosages.slice(0, -1) };\n        } else {\n          return item;\n        }\n      });\n      return {\n        ...state,\n        prescriptions: newPrescriptions,\n      };\n    }\n    case SET_PRESCRIPTION: {\n      const newPrescriptions = state.prescriptions.map((item, index) => {\n        if (index === action.index) {\n          return { ...item, [action.name]: action.value };\n        } else {\n          return item;\n        }\n      });\n      return {\n        ...state,\n        prescriptions: newPrescriptions,\n      };\n    }\n    case SET_DOSAGE:\n      const newPrescriptionsWithDosage = state.prescriptions.map(\n        (item, prescriptionIndex) => {\n          if (prescriptionIndex === action.prescriptionIndex) {\n            const newDosages = item.dosages.map((dosage, dosageIndex) => {\n              if (dosageIndex === action.index) {\n                return {\n                  ...dosage,\n                  [action.name]: action.value,\n                };\n              } else {\n                return dosage;\n              }\n            });\n            return {\n              ...item,\n              dosages: newDosages,\n            };\n          } else {\n            return item;\n          }\n        }\n      );\n      return {\n        ...state,\n        prescriptions: newPrescriptionsWithDosage,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { audiogramReducer } from './audiogram';\nimport { chartReducer } from './chart';\nimport { commonReducer } from './common';\nimport { letterHeadReducer } from './letterHead';\nimport { printReducer } from './print';\nimport { sheetReducer } from './sheet';\n\nexport const reducer = combineReducers({\n  chart: chartReducer,\n  audiogram: audiogramReducer,\n  common: commonReducer,\n  sheet: sheetReducer,\n  letterHead: letterHeadReducer,\n  print: printReducer,\n});\n","import { CLEAR, ClearAction } from '../actions/clear';\nimport {\n  PrintLetterHeadAction,\n  PRINT_LETTER_HEAD,\n} from '../actions/letterHead';\nimport { StartedPrintAction, STARTED_PRINT } from '../actions/print';\n\nexport const printReducer = (\n  state = false,\n  action: StartedPrintAction | PrintLetterHeadAction | ClearAction\n): boolean => {\n  switch (action.type) {\n    case STARTED_PRINT:\n    case CLEAR:\n      return false;\n    case PRINT_LETTER_HEAD:\n      return true;\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport { App } from './App';\nimport { reducer } from './reducers';\n\n// import reportWebVitals from './reportWebVitals';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}