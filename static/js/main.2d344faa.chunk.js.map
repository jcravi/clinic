{"version":3,"sources":["components/Label.tsx","components/DailyQuantities.tsx","components/Row.tsx","components/Prescription.tsx","components/PrintButton.tsx","App.tsx","index.tsx"],"names":["StyledLabel","styled","label","TextArea","textarea","Label","name","onInput","currentTarget","style","height","scrollHeight","Div","div","light","NumberInput","input","attrs","_","type","placeholder","min","max","DateInput","Item","ItemDate","DailyQuantities","rowIndex","useState","dailySize","setDailySize","paddingLeft","Array","fill","map","i","key","changedDates","value","target","length","removedDate","DailyQuantityRow","timeOfDay","time","times","setTimes","index","onChange","timesCopy","onBlur","StyledRow","tr","Dosage","SerialColumn","td","Input","Row","size","entered","removed","display","flexGrow","textAlign","width","autoComplete","verticalAlign","StyledTable","table","Prescription","setSize","StyledButton","button","PrintButton","onClick","event","preventDefault","window","print","OverallDiv","labels","App","fontSize","paddingTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d344faa.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledLabel = styled.label`\n  font-weight: bold;\n  display: flex;\n  align-items: flex-start;\n`;\n\nconst TextArea = styled.textarea`\n  vertical-align: top;\n  width: 100%;\n  height: 26px;\n  border: none;\n  border-bottom: 1px dotted gray;\n  overflow: hidden;\n  padding-top: 0px;\n  resize: vertical;\n  &::-webkit-resizer {\n    display: none;\n  }\n  &:focus {\n    outline: transparent;\n    border-bottom: 1px solid gray;\n  }\n  @media print {\n    border: none;\n    &:focus {\n      outline: none;\n      border: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\ntype LabelProps = {\n  name: string;\n};\n\nexport const Label = ({ name }: LabelProps) => {\n  const onTextAreaInput = ({\n    currentTarget,\n  }: React.FormEvent<HTMLTextAreaElement>) => {\n    currentTarget.style.height = '26px';\n    currentTarget.style.height = `${currentTarget.scrollHeight}px`;\n  };\n  return (\n    <div>\n      <StyledLabel>\n        {name}:&nbsp;\n        <TextArea onInput={onTextAreaInput} />\n      </StyledLabel>\n    </div>\n  );\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Div = styled.div<{ light: boolean }>`\n  display: flex;\n  border-top: ${({ light }) =>\n    light ? '1px dotted lightgray' : '1px dotted gray'};\n  @media print {\n    border-top: none;\n  }\n`;\n\nconst NumberInput = styled.input.attrs((_) => ({\n  type: 'number',\n  placeholder: '0',\n  min: 0,\n  max: 99,\n}))`\n  width: 40px;\n  border: none;\n  text-align: center;\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    opacity: 1;\n  }\n  @media print {\n    &:focus {\n      border: none;\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n  }\n`;\n\nconst DateInput = styled.input`\n  width: 100%;\n  border: none;\n  @media print {\n    &:focus {\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nconst Item = styled.div<{ light: boolean }>`\n  width: 120px;\n  text-align: center;\n  @media print {\n    visibility: ${({ light }) => (light ? 'hidden' : 'visible')};\n  }\n`;\n\nconst ItemDate = styled.div`\n  flex-grow: 1;\n  padding-left: 10px;\n  text-align: left;\n  & input {\n    text-align: left;\n  }\n`;\n\ntype DailyQuantitiesProps = {\n  rowIndex: number;\n  light: boolean;\n};\n\nexport const DailyQuantities = ({ rowIndex, light }: DailyQuantitiesProps) => {\n  const [dailySize, setDailySize] = useState(1);\n  return (\n    <>\n      <Div light={light}>\n        <Item light={light}>Morning</Item>\n        <Item light={light}>Afternoon</Item>\n        <Item light={light}>Night</Item>\n        <ItemDate style={{ paddingLeft: '12px' }}>Dates</ItemDate>\n      </Div>\n      {Array(dailySize)\n        .fill('')\n        .map((_, i) => {\n          const changedDates = ({\n            target: { value },\n          }: React.ChangeEvent<HTMLInputElement>) => {\n            if (i === dailySize - 1 && value.length !== 0) {\n              setDailySize(dailySize + 1);\n            }\n          };\n          const removedDate = ({\n            target: { value },\n          }: React.ChangeEvent<HTMLInputElement>) => {\n            if (i !== dailySize - 1 && value.length === 0) {\n              setDailySize(dailySize - 1);\n            }\n          };\n          return (\n            <DailyQuantityRow\n              key={`daily-${rowIndex}-${i}`}\n              light={light}\n              changedDates={changedDates}\n              removedDate={removedDate}\n            />\n          );\n        })}\n    </>\n  );\n};\n\ntype DailyQuantityRowProps = {\n  light: boolean;\n  changedDates: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  removedDate: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst DailyQuantityRow = ({\n  light,\n  changedDates,\n  removedDate,\n}: DailyQuantityRowProps) => {\n  const timeOfDay = ['Morning', 'Afternoon', 'Night'].map((time) => ({\n    time,\n    light: true,\n  }));\n  const [times, setTimes] = useState(timeOfDay);\n\n  return (\n    <Div light={light}>\n      {times.map(({ time, light }, index) => {\n        const handleChanged = ({\n          target: { value },\n        }: ChangeEvent<HTMLInputElement>) => {\n          const timesCopy = [...times];\n          timesCopy[index] = {\n            time,\n            light: value === '0',\n          };\n          setTimes(timesCopy);\n        };\n        return (\n          <Item key={time} light={light}>\n            <NumberInput onChange={handleChanged} />\n          </Item>\n        );\n      })}\n      <ItemDate>\n        <DateInput\n          placeholder='Dates'\n          onChange={changedDates}\n          onBlur={removedDate}\n        />\n      </ItemDate>\n    </Div>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DailyQuantities } from './DailyQuantities';\n\nconst StyledRow = styled.tr<{ light: boolean }>`\n  & input::placeholder {\n    color: ${({ light }) => (light ? 'lightgray' : 'gray')};\n  }\n\n  & td {\n    padding: 0 0 0 0;\n    border: ${({ light }) =>\n      light ? '1px dotted lightgray' : '1px solid gray'};\n    color: ${({ light }) => (light ? 'lightgray' : 'black')};\n  }\n\n  & input[type='number']::-webkit-outer-spin-button,\n  & input[type='number']::-webkit-inner-spin-button {\n    opacity: ${({ light }) => (light ? 0.3 : 1.0)};\n  }\n\n  @media print {\n    display: ${({ light }) => (light ? 'none' : 'auto')};\n    & input::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nconst Dosage = styled.div<{ light: boolean }>`\n  color: ${({ light }) => (light ? 'lightgray' : 'black')};\n  @media print {\n    border-top: none;\n  }\n`;\n\nconst SerialColumn = styled.td`\n  width: 20px;\n  color: black;\n  vertical-align: top;\n  text-align: center;\n`;\n\nconst Input = styled.input`\n  border: none;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  @media print {\n    &:focus {\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nconst TextArea = styled.textarea<{ light: boolean }>`\n  vertical-align: top;\n  width: 100px;\n  height: 75px;\n  border: none;\n  overflow: hidden;\n  resize: vertical;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  &::placeholder {\n    color: ${({ light }) => (light ? 'lightgray' : 'gray')};\n  }\n  &::-webkit-resizer {\n    display: none;\n  }\n  @media print {\n    &:focus {\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\ntype RowProps = {\n  size: number;\n  index: number;\n  entered: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  removed: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const Row = ({ size, index, entered, removed }: RowProps) => {\n  const light = index === size;\n\n  const onTextAreaInput = ({\n    currentTarget,\n  }: React.FormEvent<HTMLTextAreaElement>) => {\n    currentTarget.style.height = '75px';\n    currentTarget.style.height = `${currentTarget.scrollHeight}px`;\n  };\n\n  return (\n    <StyledRow light={light}>\n      <SerialColumn>{index}</SerialColumn>\n      <td>\n        <div style={{ display: 'flex' }}>\n          <div style={{ flexGrow: 2, textAlign: 'left' }}>\n            <Input\n              style={{ width: '100%' }}\n              type='text'\n              autoComplete='off'\n              placeholder='Medicine Name, Type &amp; Strength'\n              onChange={entered}\n              onBlur={removed}\n            />\n          </div>\n          <div>\n            <Input\n              style={{ width: '100px' }}\n              type='text'\n              placeholder='Quantity'\n            />\n          </div>\n        </div>\n        <Dosage light={light}>\n          <DailyQuantities rowIndex={index} light={light} />\n        </Dosage>\n      </td>\n      <td\n        style={{\n          width: '100px',\n          verticalAlign: 'top',\n          textAlign: 'left',\n        }}\n      >\n        <TextArea light={light} placeholder='Notes' onInput={onTextAreaInput} />\n      </td>\n    </StyledRow>\n  );\n};\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Row } from './Row';\n\nconst StyledTable = styled.table`\n  width: 100%;\n  & th {\n    text-align: center;\n  }\n  @media print {\n    & td {\n      border: none;\n      caret-color: transparent;\n    }\n  }\n`;\n\nexport const Prescription = () => {\n  const [size, setSize] = useState(2);\n\n  return (\n    <StyledTable>\n      <thead>\n        <tr>\n          <th>No.</th>\n          <th>Medicine and Dosage</th>\n          <th>Notes</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Array(size)\n          .fill('')\n          .map((_, i) => {\n            const index = i + 1;\n            const entered = ({\n              target: { value },\n            }: React.ChangeEvent<HTMLInputElement>) => {\n              if (index === size) {\n                setSize(size + 1);\n              }\n            };\n\n            const removed = ({\n              target: { value },\n            }: React.ChangeEvent<HTMLInputElement>) => {\n              if (index !== 1 && index === size - 1 && value.length === 0) {\n                setSize(size - 1);\n              }\n            };\n\n            return (\n              <Row\n                key={`row-key-${index}`}\n                index={index}\n                size={size}\n                entered={entered}\n                removed={removed}\n              />\n            );\n          })}\n      </tbody>\n    </StyledTable>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  position: fixed;\n  top: 10px;\n  right: 10px;\n\n  font-weight: bold;\n  padding: 4px 10px;\n  text-decoration: none;\n  border-radius: 4px;\n  border: 1px solid gray;\n  background: linear-gradient(to bottom, whitesmoke 0%, lightgray 100%);\n\n  &:hover {\n    border-color: black;\n    background: linear-gradient(to bottom, lightgray 0%, whitesmoke 100%);\n  }\n  &:active {\n    top: 11px;\n  }\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 10px gray;\n  }\n\n  @media print {\n    display: none;\n  }\n`;\n\nexport const PrintButton = () => {\n  const print = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    event.preventDefault();\n    window.print();\n  };\n\n  return <StyledButton onClick={print}>&#128438; Print</StyledButton>;\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Label } from './components/Label';\nimport { Prescription } from './components/Prescription';\nimport { PrintButton } from './components/PrintButton';\n\nconst OverallDiv = styled.div`\n  padding-top: 50px;\n  padding-left: 50px;\n  padding-right: 50px;\n  @media print {\n    padding-top: 75mm;\n  }\n`;\n\nconst labels: Array<string> = ['Name', 'Diagnosis', 'Procedure\\u202fdone'];\n\nexport const App = () => {\n  return (\n    <>\n      <PrintButton />\n      <OverallDiv>\n        <div>\n          {labels.map((name) => {\n            return <Label name={name} key={name} />;\n          })}\n        </div>\n        <div style={{ fontSize: '50px' }}>{'\\u211E'}</div>\n        <div>\n          <Prescription />\n        </div>\n        <div style={{ paddingTop: '50px' }}>\n          <Label name='Instructions' />\n        </div>\n      </OverallDiv>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}