{"version":3,"sources":["components/Label.tsx","components/DailyQuantity.tsx","components/Row.tsx","components/Prescription.tsx","App.tsx","index.tsx"],"names":["StyledLabel","styled","label","EditableDiv","div","Label","name","contentEditable","Div","light","NumberInput","input","attrs","_","type","placeholder","min","max","DateInput","Item","DailyQuantity","changedDates","removedDate","timeOfDay","map","time","useState","times","setTimes","index","key","handleChanged","value","target","timesCopy","onChange","onBlur","DailyQuantityItem","StyledRow","tr","Dosage","SerialColumn","td","Input","Row","size","entered","removed","dailySize","setDailySize","style","display","flexGrow","textAlign","width","autoComplete","Array","fill","i","length","verticalAlign","TextArea","onInput","currentTarget","height","scrollHeight","textarea","StyledTable","table","Prescription","setSize","OverallDiv","labels","App","fontSize","paddingTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f8ef04e.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledLabel = styled.label`\n  font-weight: bold;\n  display: flex;\n  align-items: flex-start;\n`;\n\nconst EditableDiv = styled.div`\n  flex: 1;\n  border-bottom: 1px dotted gray;\n  border-top: 1px solid transparent;\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n  &:focus {\n    font-weight: normal;\n    outline: transparent;\n    border-bottom: 1px solid gray;\n  }\n  @media print {\n    &:focus {\n      border: none;\n      caret-color: transparent;\n    }\n    border: none;\n    caret-color: transparent;\n  }\n`;\n\ntype LabelProps = {\n  name: string;\n};\n\nexport const Label = ({ name }: LabelProps) => {\n  return (\n    <div>\n      <StyledLabel>\n        {name}:&nbsp;\n        <EditableDiv contentEditable />\n      </StyledLabel>\n    </div>\n  );\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Div = styled.div<{ light: boolean }>`\n  display: flex;\n  border-top: ${({ light }) =>\n    light ? '1px dotted lightgray' : '1px dotted gray'};\n  & > div {\n    text-align: center;\n    flex-grow: 1;\n  }\n`;\n\nconst NumberInput = styled.input.attrs((_) => ({\n  type: 'number',\n  placeholder: '0',\n  min: 0,\n  max: 99,\n}))`\n  width: 40px;\n  border: none;\n  text-align: center;\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    opacity: 1;\n  }\n  @media print {\n    &:focus {\n      border: none;\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n  }\n`;\n\nconst DateInput = styled.input`\n  width: 100%;\n  border: none;\n  @media print {\n    &:focus {\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nconst Item = styled.div<{ light: boolean }>`\n  width: 100px;\n  @media print {\n    visibility: ${({ light }) => (light ? 'hidden' : 'visible')};\n  }\n`;\n\ntype DailyQuantityProps = {\n  light: boolean;\n  changedDates: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  removedDate: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const DailyQuantity = ({\n  light,\n  changedDates,\n  removedDate,\n}: DailyQuantityProps) => {\n  const timeOfDay = ['Morning', 'Afternoon', 'Night'].map((time) => ({\n    time,\n    light: true,\n  }));\n  const [times, setTimes] = useState(timeOfDay);\n\n  return (\n    <Div light={light}>\n      {times.map(({ time, light }, index) => {\n        const handleChanged = ({\n          target: { value },\n        }: ChangeEvent<HTMLInputElement>) => {\n          const timesCopy = [...times];\n          timesCopy[index] = {\n            time,\n            light: value === '0',\n          };\n          setTimes(timesCopy);\n        };\n        return (\n          <DailyQuantityItem\n            key={time}\n            time={time}\n            light={light}\n            handleChanged={handleChanged}\n          />\n        );\n      })}\n      <div>\n        <DateInput\n          placeholder='Days'\n          onChange={changedDates}\n          onBlur={removedDate}\n        />\n      </div>\n    </Div>\n  );\n};\n\ntype ItemProps = {\n  time: string;\n  light: boolean;\n  handleChanged: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst DailyQuantityItem = ({ time, light, handleChanged }: ItemProps) => {\n  return (\n    <Item light={light}>\n      <div>\n        <NumberInput onChange={handleChanged} />\n      </div>\n      {time}\n    </Item>\n  );\n};\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { DailyQuantity } from './DailyQuantity';\n\nconst StyledRow = styled.tr<{ light: boolean }>`\n  & input::placeholder,\n  & div[contentEditable='true']:empty:not(:focus):before {\n    color: ${({ light }) => (light ? 'lightgray' : 'gray')};\n  }\n\n  & td {\n    padding: 0 0 0 0;\n    border: ${({ light }) =>\n      light ? '1px dotted lightgray' : '1px solid gray'};\n    color: ${({ light }) => (light ? 'lightgray' : 'black')};\n  }\n\n  & input[type='number']::-webkit-outer-spin-button,\n  & input[type='number']::-webkit-inner-spin-button {\n    opacity: ${({ light }) => (light ? 0.3 : 1.0)};\n  }\n\n  @media print {\n    display: ${({ light }) => (light ? 'none' : 'auto')};\n    & input::placeholder,\n    & div[contentEditable='true']:empty:not(:focus):before {\n      color: transparent;\n    }\n  }\n`;\n\nconst Dosage = styled.div<{ light: boolean }>`\n  color: ${({ light }) => (light ? 'lightgray' : 'black')};\n  @media print {\n    border-top: none;\n  }\n`;\n\nconst SerialColumn = styled.td`\n  width: 20px;\n  color: black;\n  vertical-align: top;\n  text-align: center;\n`;\n\nconst Input = styled.input`\n  border: none;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  @media print {\n    &:focus {\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\ntype RowProps = {\n  size: number;\n  index: number;\n  entered: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  removed: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const Row = ({ size, index, entered, removed }: RowProps) => {\n  const light = index === size;\n  const [dailySize, setDailySize] = useState(1);\n\n  const onTextAreaInput = ({\n    currentTarget,\n  }: React.FormEvent<HTMLTextAreaElement>) => {\n    currentTarget.style.height = '75px';\n    currentTarget.style.height = `${currentTarget.scrollHeight}px`;\n  };\n\n  return (\n    <StyledRow light={light}>\n      <SerialColumn>{index}</SerialColumn>\n      <td>\n        <div style={{ display: 'flex' }}>\n          <div style={{ flexGrow: 2, textAlign: 'left' }}>\n            <Input\n              style={{ width: '100%' }}\n              type='text'\n              autoComplete='off'\n              placeholder='Medicine Name, Type &amp; Strength'\n              onChange={entered}\n              onBlur={removed}\n            />\n          </div>\n          <div>\n            <Input\n              style={{ width: '100px' }}\n              type='text'\n              placeholder='Quantity'\n            />\n          </div>\n        </div>\n        <Dosage light={light}>\n          {Array(dailySize)\n            .fill('')\n            .map((_, i) => {\n              const changedDates = ({\n                target: { value },\n              }: React.ChangeEvent<HTMLInputElement>) => {\n                if (i === dailySize - 1 && value.length !== 0) {\n                  setDailySize(dailySize + 1);\n                }\n              };\n              const removedDate = ({\n                target: { value },\n              }: React.ChangeEvent<HTMLInputElement>) => {\n                if (i !== dailySize - 1 && value.length === 0) {\n                  setDailySize(dailySize - 1);\n                }\n              };\n              return (\n                <DailyQuantity\n                  key={`daily-${index}-${i}`}\n                  light={light}\n                  changedDates={changedDates}\n                  removedDate={removedDate}\n                />\n              );\n            })}\n        </Dosage>\n      </td>\n      <td\n        style={{\n          width: '100px',\n          verticalAlign: 'top',\n          textAlign: 'left',\n        }}\n      >\n        <TextArea light={light} placeholder='Notes' onInput={onTextAreaInput} />\n      </td>\n    </StyledRow>\n  );\n};\n\nconst TextArea = styled.textarea<{ light: boolean }>`\n  vertical-align: top;\n  width: 100px;\n  height: 75px;\n  border: none;\n  overflow: hidden;\n  resize: vertical;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  &::placeholder {\n    color: ${({ light }) => (light ? 'lightgray' : 'gray')};\n  }\n  &::-webkit-resizer {\n    display: none;\n  }\n  @media print {\n    &:focus {\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Row } from './Row';\n\nconst StyledTable = styled.table`\n  width: 100%;\n  & th {\n    text-align: center;\n  }\n  @media print {\n    & td {\n      border: none;\n      caret-color: transparent;\n    }\n  }\n`;\n\nexport const Prescription = () => {\n  const [size, setSize] = useState(2);\n\n  return (\n    <StyledTable>\n      <thead>\n        <tr>\n          <th>No.</th>\n          <th>Medicine and Dosage</th>\n          <th>Notes</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Array(size)\n          .fill('')\n          .map((_, i) => {\n            const index = i + 1;\n            const entered = ({\n              target: { value },\n            }: React.ChangeEvent<HTMLInputElement>) => {\n              if (index === size) {\n                setSize(size + 1);\n              }\n            };\n\n            const removed = ({\n              target: { value },\n            }: React.ChangeEvent<HTMLInputElement>) => {\n              if (index !== 1 && index === size - 1 && value.length === 0) {\n                setSize(size - 1);\n              }\n            };\n\n            return (\n              <Row\n                key={`row-key-${index}`}\n                index={index}\n                size={size}\n                entered={entered}\n                removed={removed}\n              />\n            );\n          })}\n      </tbody>\n    </StyledTable>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Label } from './components/Label';\nimport { Prescription } from './components/Prescription';\n\nconst OverallDiv = styled.div`\n  padding-top: 50px;\n  padding-left: 50px;\n  padding-right: 50px;\n  @media print {\n    padding-top: 75mm;\n  }\n`;\n\nconst labels: Array<string> = ['Name', 'Diagnosis', 'Procedure done'];\n\nexport const App = () => {\n  return (\n    <OverallDiv>\n      <div>\n        {labels.map((name) => {\n          return <Label name={name} key={name} />;\n        })}\n      </div>\n      <div style={{ fontSize: '50px' }}>{'\\u211E'}</div>\n      <div>\n        <Prescription />\n      </div>\n      <div style={{ paddingTop: '50px' }}>\n        <Label name='Instructions' />\n      </div>\n    </OverallDiv>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}