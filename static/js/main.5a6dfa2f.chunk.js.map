{"version":3,"sources":["App.tsx","index.tsx"],"names":["labels","Label","name","className","contentEditable","App","useState","currentSize","setCurrentSize","entered","i","map","key","Array","fill","_","index","Row","maybe","maybeLeft","timeOfDay","time","css","times","setTimes","rowSpan","style","verticalAlign","width","type","placeholder","onChange","display","flexGrow","textAlign","outline","data-ph","min","max","value","target","timesCopy","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAGMA,G,MAAwB,CAAC,OAAQ,YAAa,iBAAkB,SAEhEC,EAAQ,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KACf,OACE,6BACE,2BAAOC,UAAU,SACdD,EADH,IAEE,yBAAKE,iBAAe,OAMfC,EAAM,WAAO,IAAD,EACeC,mBAAS,GADxB,mBAChBC,EADgB,KACHC,EADG,KAGjBC,EAAU,SAACC,GACXA,IAAMH,GACRC,EAAeD,EAAc,IAIjC,OACE,yBAAKJ,UAAU,WACb,yBAAKA,UAAU,QACZH,EAAOW,KAAI,SAACT,GACX,OAAO,kBAAC,EAAD,CAAOA,KAAMA,EAAMU,IAAKV,QAGnC,yBAAKC,UAAU,MAAM,UACrB,yBAAKA,UAAU,gBACb,+BACE,+BACGU,MAAMN,GACJO,KAAK,IACLH,KAAI,SAACI,EAAGL,GACP,IAAMM,EAAQN,EAAI,EAClB,OACE,kBAAC,EAAD,CACEE,IAAG,cAASI,GACZA,MAAOA,EACPT,YAAaA,EACbE,QAASA,YAiBvBQ,EAAM,SAAC,GAA+C,IAA7CV,EAA4C,EAA5CA,YAAaS,EAA+B,EAA/BA,MAAOP,EAAwB,EAAxBA,QAAwB,EAEvDO,IAAUT,EAAc,CAAC,QAAS,aAAe,CAAC,GAAI,QAFC,mBAClDW,EADkD,KAC3CC,EAD2C,KAInDC,EAAY,CAAC,UAAW,YAAa,SAAST,KAAI,SAACU,GAAD,MAAW,CACjEA,OACAC,IAAK,aANkD,EAQ/BhB,mBAASc,GARsB,mBAQlDG,EARkD,KAQ3CC,EAR2C,KAUzD,OACE,kBAAC,WAAD,CAAUZ,IAAG,cAASI,IACpB,wBAAIb,UAAWe,GACb,wBAAIO,QAAS,EAAGC,MAAO,CAAEC,cAAe,QACrCX,GAEH,wBAAIU,MAAO,CAAEE,MAAO,SAClB,2BACEF,MAAO,CAAEE,MAAO,QAChBC,KAAK,OACLC,YAAY,OACZ3B,UAAU,aACV4B,SAAU,kBAAMtB,EAAQO,OAG5B,4BACE,yBAAKU,MAAO,CAAEM,QAAS,SACrB,yBAAKN,MAAO,CAAEO,SAAU,EAAGC,UAAW,SACpC,2BACER,MAAO,CAAEE,MAAO,QAChBC,KAAK,OACLC,YAAY,2BACZ3B,UAAU,aACV4B,SAAU,kBAAMtB,EAAQO,OAG5B,yBAAKb,UAAWgB,GACd,2BACEO,MAAO,CAAEE,MAAO,SAChBC,KAAK,OACLC,YAAY,WACZ3B,UAAU,kBAKlB,wBACEsB,QAAS,EACTC,MAAO,CACLE,MAAO,QACPD,cAAe,MACfO,UAAW,OACXC,QAAS,SAGX,yBAAKT,MAAO,CAAEE,MAAO,SAAWxB,iBAAe,EAACgC,UAAQ,cAG5D,wBAAIjC,UAAWe,GACb,6BACA,4BACE,yBAAKf,UAAU,YACZoB,EAAMZ,KAAI,WAAgBK,GAAW,IAAxBK,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,IAWlB,OACE,yBAAKV,IAAKS,EAAMlB,UAAWmB,GACzB,6BACE,2BACEO,KAAK,SACLC,YAAY,IACZO,IAAK,EACLC,IAAK,GACLP,SAlBc,SAAC,GAEe,IAD1BQ,EACyB,EADnCC,OAAUD,MAEJE,EAAS,YAAOlB,GACtBkB,EAAUzB,GAAS,CACjBK,OACAC,IAAe,MAAViB,EAAgB,SAAW,IAElCf,EAASiB,OAaNpB,WC5InBqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.5a6dfa2f.chunk.js","sourcesContent":["import React, { ChangeEvent, Fragment, useState } from 'react';\nimport './App.css';\n\nconst labels: Array<string> = ['Name', 'Diagnosis', 'Procedure done', 'Care'];\n\nconst Label = ({ name }: { name: string }) => {\n  return (\n    <div>\n      <label className='label'>\n        {name}:\n        <div contentEditable />\n      </label>\n    </div>\n  );\n};\n\nexport const App = () => {\n  const [currentSize, setCurrentSize] = useState(2);\n\n  const entered = (i: number) => {\n    if (i === currentSize) {\n      setCurrentSize(currentSize + 1);\n    }\n  };\n\n  return (\n    <div className='overall'>\n      <div className='info'>\n        {labels.map((name) => {\n          return <Label name={name} key={name} />;\n        })}\n      </div>\n      <div className='rx'>{'\\u211E'}</div>\n      <div className='prescription'>\n        <table>\n          <tbody>\n            {Array(currentSize)\n              .fill('')\n              .map((_, i) => {\n                const index = i + 1;\n                return (\n                  <Row\n                    key={`key-${index}`}\n                    index={index}\n                    currentSize={currentSize}\n                    entered={entered}\n                  />\n                );\n              })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\ntype RowProps = {\n  currentSize: number;\n  index: number;\n  entered: (i: number) => void;\n};\n\nconst Row = ({ currentSize, index, entered }: RowProps) => {\n  const [maybe, maybeLeft] =\n    index === currentSize ? ['maybe', 'maybeLeft'] : ['', 'left'];\n\n  const timeOfDay = ['Morning', 'Afternoon', 'Night'].map((time) => ({\n    time,\n    css: 'hidden',\n  }));\n  const [times, setTimes] = useState(timeOfDay);\n\n  return (\n    <Fragment key={`key-${index}`}>\n      <tr className={maybe}>\n        <td rowSpan={2} style={{ verticalAlign: 'top' }}>\n          {index}\n        </td>\n        <td style={{ width: '50px' }}>\n          <input\n            style={{ width: '50px' }}\n            type='text'\n            placeholder='Type'\n            className='tableInput'\n            onChange={() => entered(index)}\n          />\n        </td>\n        <td>\n          <div style={{ display: 'flex' }}>\n            <div style={{ flexGrow: 2, textAlign: 'left' }}>\n              <input\n                style={{ width: '100%' }}\n                type='text'\n                placeholder='Medicine Name &amp; Strength'\n                className='tableInput'\n                onChange={() => entered(index)}\n              />\n            </div>\n            <div className={maybeLeft}>\n              <input\n                style={{ width: '100px' }}\n                type='text'\n                placeholder='Quantity'\n                className='tableInput'\n              />\n            </div>\n          </div>\n        </td>\n        <td\n          rowSpan={2}\n          style={{\n            width: '100px',\n            verticalAlign: 'top',\n            textAlign: 'left',\n            outline: 'none',\n          }}\n        >\n          <div style={{ width: '100px' }} contentEditable data-ph='Remarks' />\n        </td>\n      </tr>\n      <tr className={maybe}>\n        <td></td>\n        <td>\n          <div className='schedule'>\n            {times.map(({ time, css }, index) => {\n              const handleChanged = ({\n                target: { value },\n              }: ChangeEvent<HTMLInputElement>) => {\n                const timesCopy = [...times];\n                timesCopy[index] = {\n                  time,\n                  css: value === '0' ? 'hidden' : '',\n                };\n                setTimes(timesCopy);\n              };\n              return (\n                <div key={time} className={css}>\n                  <div>\n                    <input\n                      type='number'\n                      placeholder='0'\n                      min={0}\n                      max={99}\n                      onChange={handleChanged}\n                    />\n                  </div>\n                  {time}\n                </div>\n              );\n            })}\n          </div>\n        </td>\n      </tr>\n    </Fragment>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}