{"version":3,"sources":["components/Label.tsx","components/LetterHead.tsx","components/DailyQuantities.tsx","components/Input.tsx","components/MedicineName.tsx","js/search.ts","components/Table.tsx","components/Row.tsx","components/Prescription.tsx","components/PrintButton.tsx","App.tsx","index.tsx"],"names":["StyledLabel","styled","label","TextArea","textarea","Label","name","onInput","currentTarget","style","height","scrollHeight","autoFocus","Container","div","printLetterHead","Title","Content","Address","LetterHead","fontSize","fontWeight","Div","light","NumberInput","input","attrs","_","type","placeholder","min","max","DateInput","Item","ItemDate","DailyQuantities","rowIndex","useState","dailySize","setDailySize","paddingLeft","textAlign","Array","fill","map","i","key","changedDates","value","target","length","removedDate","DailyQuantityRow","timeOfDay","time","times","setTimes","index","onChange","timesCopy","onBlur","Input","AutoCompleteContainer","AutoCompleteItems","AutoCompleteItem","highlighted","hover","MedicineName","entered","removed","setName","choices","setChoices","selected","setSelected","setHover","reset","onMouseMove","setInput","medicine","form","width","autoComplete","event","onKeyUp","newSelected","test","names","userEntered","array","val","replace","lowerVal","toLowerCase","words","split","wordsLower","rexStr","join","rexCase","RegExp","rex","medicines","item","score","searchStr","startsWith","searchStrLower","includes","word","push","filter","x","sort","a","b","search","slice","console","log","choice","onMouseDown","generic","Table","Column","SerialColumn","MiddleColumn","NotesColumn","TableRow","HeaderRow","StyledRow","Dosage","NameSection","Row","size","Prescription","setSize","ButtonPlacement","StyledButton","button","PrintButton","setPrintLetterHead","setPrint","print","preventDefault","onClick","e","OverallDiv","labels","App","date","Date","toLocaleDateString","useEffect","window","paddingTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaf5e642.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledLabel = styled.label`\n  font-weight: bold;\n  display: flex;\n  align-items: flex-start;\n`;\n\nconst TextArea = styled.textarea`\n  vertical-align: top;\n  width: 100%;\n  height: 26px;\n  border: none;\n  border-bottom: 1px dotted gray;\n  overflow: hidden;\n  padding-top: 0px;\n  resize: vertical;\n  &::-webkit-resizer {\n    display: none;\n  }\n  &:focus {\n    outline: transparent;\n    border-bottom: 1px solid gray;\n  }\n  @media print {\n    border: none;\n    &:focus {\n      outline: none;\n      border: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\ntype LabelProps = {\n  name: string;\n};\n\nexport const Label = ({ name }: LabelProps) => {\n  const onTextAreaInput = ({\n    currentTarget,\n  }: React.FormEvent<HTMLTextAreaElement>) => {\n    currentTarget.style.height = '26px';\n    currentTarget.style.height = `${currentTarget.scrollHeight}px`;\n  };\n  return (\n    <div>\n      <StyledLabel>\n        {name}:&nbsp;\n        <TextArea onInput={onTextAreaInput} autoFocus={name === 'Name'} />\n      </StyledLabel>\n    </div>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div<{ printLetterHead: boolean }>`\n  margin-left: 30px;\n  margin-right: 30px;\n  margin-top: 10px;\n  display: block;\n  @media print {\n    display: ${({ printLetterHead }) => (printLetterHead ? 'block' : 'none')};\n  }\n`;\n\nconst Title = styled.div`\n  text-align: center;\n  font-size: 30px;\n  font-weight: bold;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Address = styled.div`\n  text-align: center;\n  font-size: 13px;\n  font-weight: bold;\n\n  margin-top: 5px;\n\n  padding-top: 2px;\n  padding-bottom: 2px;\n\n  border-top: 2px solid black;\n  border-bottom: 2px solid black;\n`;\n\nexport const LetterHead = ({\n  printLetterHead,\n}: {\n  printLetterHead: boolean;\n}) => {\n  return (\n    <Container printLetterHead={printLetterHead}>\n      <Title>JK Holistic Ear nose Throat &amp; Head-Neck Clinic</Title>\n      <Content>\n        <div>\n          <div style={{ fontSize: '20px', fontWeight: 'bold' }}>\n            Dr. Janardhan N. C.\n          </div>\n          <div>MBBS, MS(ENT), DORL, PGDHHCM</div>\n          <div>Reg. No: 45341</div>\n        </div>\n        <div>\n          <div>Mon/Wed/Thur/Sat</div>\n          <div>10 am to 1 pm</div>\n          <div>5 pm to 8 pm</div>\n        </div>\n      </Content>\n      <Address>\n        45,46 Panvel City Centre, Ground Floor, Dr. B. Ambedkar Road,\n        Panvel-410206. Tel: 022-27456244 Mob: 9324796638\n      </Address>\n    </Container>\n  );\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Div = styled.div<{ light: boolean }>`\n  display: flex;\n  border-top: ${({ light }) =>\n    light ? '1px dotted lightgray' : '1px dotted gray'};\n  @media print {\n    border-top: none;\n  }\n`;\n\nconst NumberInput = styled.input.attrs((_) => ({\n  type: 'number',\n  placeholder: '0',\n  min: 0,\n  max: 99,\n}))`\n  width: 40px;\n  border: none;\n  text-align: center;\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    opacity: 1;\n  }\n  @media print {\n    &:focus {\n      border: none;\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n  }\n`;\n\nconst DateInput = styled.input`\n  width: 100%;\n  border: none;\n  @media print {\n    &:focus {\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nconst Item = styled.div<{ light: boolean }>`\n  width: 120px;\n  text-align: center;\n  @media print {\n    visibility: ${({ light }) => (light ? 'hidden' : 'visible')};\n  }\n`;\n\nconst ItemDate = styled.div`\n  flex-grow: 1;\n  padding-left: 10px;\n  text-align: left;\n  & input {\n    text-align: left;\n  }\n`;\n\ntype DailyQuantitiesProps = {\n  rowIndex: number;\n  light: boolean;\n};\n\nexport const DailyQuantities = ({ rowIndex, light }: DailyQuantitiesProps) => {\n  const [dailySize, setDailySize] = useState(1);\n  return (\n    <>\n      <Div light={light}>\n        <Item light={light}>Morning</Item>\n        <Item light={light}>Afternoon</Item>\n        <Item light={light}>Night</Item>\n        <ItemDate style={{ paddingLeft: '12px', textAlign: 'left' }}>\n          Dates\n        </ItemDate>\n      </Div>\n      {Array(dailySize)\n        .fill('')\n        .map((_, i) => {\n          const changedDates = ({\n            target: { value },\n          }: React.ChangeEvent<HTMLInputElement>) => {\n            if (i === dailySize - 1 && value.length !== 0) {\n              setDailySize(dailySize + 1);\n            }\n          };\n          const removedDate = ({\n            target: { value },\n          }: React.ChangeEvent<HTMLInputElement>) => {\n            if (i !== dailySize - 1 && value.length === 0) {\n              setDailySize(dailySize - 1);\n            }\n          };\n          return (\n            <DailyQuantityRow\n              key={`daily-${rowIndex}-${i}`}\n              light={light}\n              changedDates={changedDates}\n              removedDate={removedDate}\n            />\n          );\n        })}\n    </>\n  );\n};\n\ntype DailyQuantityRowProps = {\n  light: boolean;\n  changedDates: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  removedDate: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst DailyQuantityRow = ({\n  light,\n  changedDates,\n  removedDate,\n}: DailyQuantityRowProps) => {\n  const timeOfDay = ['Morning', 'Afternoon', 'Night'].map((time) => ({\n    time,\n    light: true,\n  }));\n  const [times, setTimes] = useState(timeOfDay);\n\n  return (\n    <Div light={light}>\n      {times.map(({ time, light }, index) => {\n        const handleChanged = ({\n          target: { value },\n        }: ChangeEvent<HTMLInputElement>) => {\n          const timesCopy = [...times];\n          timesCopy[index] = {\n            time,\n            light: value === '0',\n          };\n          setTimes(timesCopy);\n        };\n        return (\n          <Item key={time} light={light}>\n            <NumberInput onChange={handleChanged} />\n          </Item>\n        );\n      })}\n      <ItemDate>\n        <DateInput\n          placeholder='Dates'\n          onChange={changedDates}\n          onBlur={removedDate}\n        />\n      </ItemDate>\n    </Div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  border: none;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  @media print {\n    &:focus {\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { search, SearchResult } from '../js/search';\nimport { Input } from './Input';\n\nconst AutoCompleteContainer = styled.div`\n  position: relative;\n  flex-grow: 2;\n  text-align: left;\n`;\n\nconst AutoCompleteItems = styled.div`\n  position: absolute;\n  border: 1px solid lightgray;\n  border-bottom: none;\n  border-top: none;\n  z-index: 99;\n  /*position the autocomplete items to be the same width as the container:*/\n  top: 100%;\n  left: -20px;\n  right: 0;\n  box-shadow: 0px 3px 10px gray;\n  width: 130%;\n  @media print {\n    display: none;\n  }\n`;\n\nconst AutoCompleteItem = styled.div<{ highlighted: boolean; hover: boolean }>`\n  text-align: left !important;\n  padding: 3px;\n  cursor: pointer;\n  background-color: ${({ highlighted }) =>\n    highlighted ? 'lightgray' : 'whitesmoke'};\n  border-bottom: 1px solid gray;\n  &:hover {\n    background-color: ${({ highlighted, hover }) =>\n      hover ? 'lightgray' : highlighted ? 'lightgray' : 'whitesmoke'};\n  }\n  & span {\n    font-style: italic;\n  }\n`;\n\ntype Props = {\n  entered: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  removed: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const MedicineName = ({ entered, removed }: Props) => {\n  const [name, setName] = useState('');\n  const [choices, setChoices] = useState<Array<SearchResult>>([]);\n  const [selected, setSelected] = useState<number>(-1);\n  const [hover, setHover] = useState(true);\n\n  const reset = () => {\n    setChoices([]);\n    setSelected(-1);\n  };\n\n  const onKeyUp = ({ key }: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (key === 'Escape') {\n      reset();\n    } else if (key === 'ArrowUp') {\n      const newSelected = selected <= 0 ? choices.length - 1 : selected - 1;\n      setSelected(newSelected);\n      setHover(false);\n    } else if (key === 'ArrowDown') {\n      const newSelected = selected >= choices.length - 1 ? 0 : selected + 1;\n      setSelected(newSelected);\n      setHover(false);\n    } else if (key === 'Enter') {\n      if (selected >= 0) {\n        setInput(choices[selected]);\n        reset();\n      }\n    } else if (/[a-z0-9]/i.test(key) || key === 'Backspace') {\n      if (name.length > 0) {\n        const names = search(name).slice(0, 10);\n        setChoices(names);\n      } else {\n        reset();\n      }\n    } else {\n      console.log('SOMETHING ELSE', `\"${key}\"`);\n    }\n  };\n\n  const onBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    removed(event);\n    reset();\n  };\n\n  const onMouseMove = () => {\n    setSelected(-1);\n    setHover(true);\n  };\n\n  const setInput = (medicine: SearchResult) => {\n    setName(`${medicine.form} ${medicine.name}`);\n  };\n\n  return (\n    <AutoCompleteContainer>\n      <Input\n        style={{ width: '100%' }}\n        type='text'\n        autoComplete='off'\n        placeholder='Medicine Name, Type &amp; Strength'\n        onChange={(event) => {\n          entered(event);\n          setName(event.target.value);\n        }}\n        onBlur={onBlur}\n        onKeyUp={onKeyUp}\n        value={name}\n      />\n      {choices.length !== 0 && (\n        <AutoCompleteItems>\n          {choices.map((choice, index) => {\n            const onMouseDown = () => {\n              setInput(choice);\n              reset();\n            };\n            return (\n              <AutoCompleteItem\n                key={`${choice.name}-${choice.type}-${choice.form}-${index}`}\n                highlighted={index === selected}\n                hover={hover}\n                onMouseDown={onMouseDown}\n                onMouseMove={onMouseMove}\n              >\n                {choice.type}: {choice.form} {choice.name}{' '}\n                <span>({choice.generic})</span>\n              </AutoCompleteItem>\n            );\n          })}\n        </AutoCompleteItems>\n      )}\n    </AutoCompleteContainer>\n  );\n};\n","import medicines from '../assets/medicine-array.json';\n\ntype MedicineType = {\n  type: string;\n  form: string;\n  name: string;\n  generic: string;\n  strength: string;\n  notes: string;\n};\n\nexport type SearchResult = MedicineType & {\n  searchStr: string;\n  searchStrLower: string;\n  score: number;\n};\n\nexport const search = (userEntered: string): Array<SearchResult> => {\n  const array: Array<SearchResult> = [];\n\n  // converting the word to search in multiple ways\n  const val = userEntered.replace(/[^0-9a-z ]/gi, '');\n  const lowerVal = val.toLowerCase();\n\n  const words: Array<string> = val.split(' ');\n  const wordsLower = lowerVal.split(' ');\n\n  const rexStr = '.*' + val.split('').join('.*');\n\n  const rexCase = new RegExp(rexStr);\n  const rex = new RegExp(rexStr, 'i');\n\n  // Loop only once\n  for (const item of medicines) {\n    let score = 0;\n    // full user search starts\n    if (item.searchStr.startsWith(val)) {\n      score += 5;\n    }\n\n    // full user search case insensitive start\n    if (item.searchStrLower.startsWith(lowerVal)) {\n      score += 5;\n    }\n\n    // full user search\n    if (item.searchStr.includes(val)) {\n      score += 3;\n    }\n\n    // full user search case insensitive\n    if (item.searchStrLower.includes(lowerVal)) {\n      score += 3;\n    }\n\n    // search for words\n    for (const word of words) {\n      if (item.searchStr.includes(word)) {\n        score += 2;\n      }\n    }\n\n    // search for words case insensitive\n    for (const word of wordsLower) {\n      if (item.searchStrLower.includes(word)) {\n        score += 2;\n      }\n    }\n\n    // search individual letters\n    if (rexCase.test(item.searchStr)) {\n      score++;\n    }\n\n    if (rex.test(item.searchStrLower)) {\n      score++;\n    }\n    array.push({ ...item, score });\n  }\n\n  return array.filter((x) => x.score !== 0).sort((a, b) => b.score - a.score);\n};\n","import styled from 'styled-components';\n\nexport const Table = styled.div`\n  width: 100%;\n  border: none;\n  & div {\n    border: none;\n    text-align: center;\n  }\n  @media print {\n    border: none;\n    & div {\n      border: none;\n      caret-color: transparent;\n    }\n  }\n`;\n\nconst Column = styled.div`\n  vertical-align: top;\n  border-width: 1px !important;\n  @media print {\n    border: none !important;\n  }\n`;\n\nexport const SerialColumn = styled(Column)`\n  width: 25px;\n  vertical-align: top;\n  text-align: center;\n  border-left: 1px solid gray;\n  border-right: none !important;\n`;\n\nexport const MiddleColumn = styled(Column)`\n  flex-grow: 1;\n  color: black;\n  text-align: center;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n`;\n\nexport const NotesColumn = styled(Column)`\n  width: 100px;\n  text-align: left;\n  border-right: 1px solid gray;\n  border-left: none !important;\n`;\n\nexport const TableRow = styled.div`\n  display: flex;\n  width: 100%;\n  & > div {\n    border-top: none !important;\n    border-bottom: none !important;\n  }\n`;\n\nexport const HeaderRow = styled(TableRow)`\n  font-weight: bold;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DailyQuantities } from './DailyQuantities';\nimport { Input } from './Input';\nimport { MedicineName } from './MedicineName';\nimport { MiddleColumn, NotesColumn, SerialColumn, TableRow } from './Table';\n\nconst StyledRow = styled(TableRow)<{ light: boolean }>`\n  & input::placeholder {\n    color: ${({ light }) => (light ? 'lightgray' : 'gray')};\n  }\n\n  border-top: 1px solid gray !important;\n  border-bottom: ${({ light }) => (light ? '1px dotted lightgray' : 'none')};\n\n  & > div {\n    padding: 0 0 0 0;\n    border-color: ${({ light }) => (light ? 'lightgray' : 'gray')};\n    border-style: ${({ light }) => (light ? 'dotted' : 'solid')};\n    color: ${({ light }) => (light ? 'lightgray' : 'black')};\n  }\n\n  & input[type='number']::-webkit-outer-spin-button,\n  & input[type='number']::-webkit-inner-spin-button {\n    opacity: ${({ light }) => (light ? 0.3 : 1.0)};\n  }\n\n  @media print {\n    display: ${({ light }) => (light ? 'none' : 'auto')};\n    border: none !important;\n    border-top: 1px dotted gray !important;\n    & input::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nconst Dosage = styled.div<{ light: boolean }>`\n  color: ${({ light }) => (light ? 'lightgray' : 'black')};\n  border-top: 1px ${({ light }) => (light ? 'dotted lightgray' : 'solid gray')} !important;\n  @media print {\n    border-top: none !important;\n  }\n`;\n\nconst TextArea = styled.textarea<{ light: boolean }>`\n  vertical-align: top;\n  width: 99px;\n  height: 75px;\n  border: none;\n  overflow: hidden;\n  resize: vertical;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  &::placeholder {\n    color: ${({ light }) => (light ? 'lightgray' : 'gray')};\n  }\n  &::-webkit-resizer {\n    display: none;\n  }\n  @media print {\n    &:focus {\n      outline: none;\n    }\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nconst NameSection = styled.div<{ light: boolean }>`\n  display: flex;\n`;\n\ntype RowProps = {\n  size: number;\n  index: number;\n  entered: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  removed: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const Row = ({ size, index, entered, removed }: RowProps) => {\n  const light = index === size;\n\n  const onTextAreaInput = ({\n    currentTarget,\n  }: React.FormEvent<HTMLTextAreaElement>) => {\n    currentTarget.style.height = '75px';\n    currentTarget.style.height = `${currentTarget.scrollHeight}px`;\n  };\n\n  return (\n    <StyledRow light={light}>\n      <SerialColumn>{index}</SerialColumn>\n      <MiddleColumn>\n        <NameSection light={light}>\n          <MedicineName entered={entered} removed={removed} />\n          <div style={{ width: '101px' }}>\n            <Input\n              style={{ width: '100px' }}\n              type='text'\n              placeholder='Quantity'\n            />\n          </div>\n        </NameSection>\n        <Dosage light={light}>\n          <DailyQuantities rowIndex={index} light={light} />\n        </Dosage>\n      </MiddleColumn>\n      <NotesColumn>\n        <TextArea light={light} placeholder='Notes' onInput={onTextAreaInput} />\n      </NotesColumn>\n    </StyledRow>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { Row } from './Row';\nimport {\n  MiddleColumn,\n  NotesColumn,\n  SerialColumn,\n  Table,\n  HeaderRow,\n} from './Table';\n\nexport const Prescription = () => {\n  const [size, setSize] = useState(2);\n\n  return (\n    <Table>\n      <HeaderRow>\n        <SerialColumn>No.</SerialColumn>\n        <MiddleColumn>Medicine and Dosage</MiddleColumn>\n        <NotesColumn>Notes</NotesColumn>\n      </HeaderRow>\n      {Array(size)\n        .fill('')\n        .map((_, i) => {\n          const index = i + 1;\n          const entered = ({\n            target: { value },\n          }: React.ChangeEvent<HTMLInputElement>) => {\n            if (index === size) {\n              setSize(size + 1);\n            }\n          };\n\n          const removed = ({\n            target: { value },\n          }: React.ChangeEvent<HTMLInputElement>) => {\n            if (index !== 1 && index === size - 1 && value.length === 0) {\n              setSize(size - 1);\n            }\n          };\n\n          return (\n            <Row\n              key={`row-key-${index}`}\n              index={index}\n              size={size}\n              entered={entered}\n              removed={removed}\n            />\n          );\n        })}\n    </Table>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ButtonPlacement = styled.div`\n  position: fixed;\n  top: 10px;\n  right: 10px;\n\n  font-weight: bold;\n  & > div {\n    text-align: right;\n    margin-bottom: 10px;\n  }\n`;\n\nconst StyledButton = styled.button`\n  padding: 4px 10px;\n  text-decoration: none;\n  border-radius: 4px;\n  border: 1px solid gray;\n  background: linear-gradient(to bottom, whitesmoke 0%, lightgray 100%);\n\n  &:hover {\n    border-color: black;\n    background: linear-gradient(to bottom, lightgray 0%, whitesmoke 100%);\n  }\n  &:active {\n    top: 11px;\n  }\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 10px gray;\n  }\n\n  @media print {\n    display: none;\n  }\n`;\n\nexport const PrintButton = ({\n  setPrintLetterHead,\n  setPrint,\n}: {\n  setPrintLetterHead: React.Dispatch<React.SetStateAction<boolean>>;\n  setPrint: React.Dispatch<React.SetStateAction<boolean>>;\n}) => {\n  const print = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    printLetterHead: boolean\n  ): void => {\n    setPrintLetterHead(printLetterHead);\n    event.preventDefault();\n    setPrint(true);\n  };\n\n  return (\n    <ButtonPlacement>\n      <div>\n        <StyledButton onClick={(e) => print(e, true)}>\n          &#128438; LetterHead\n        </StyledButton>\n      </div>\n      <div>\n        <StyledButton onClick={(e) => print(e, false)}>\n          &#128438; Print\n        </StyledButton>\n      </div>\n    </ButtonPlacement>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { Label } from './components/Label';\nimport { LetterHead } from './components/LetterHead';\nimport { Prescription } from './components/Prescription';\nimport { PrintButton } from './components/PrintButton';\n\nconst OverallDiv = styled.div<{ printLetterHead: boolean }>`\n  padding-top: 10px;\n  padding-left: 50px;\n  padding-right: 50px;\n  font-size: 17px;\n  @media print {\n    padding-top: ${({ printLetterHead }) =>\n      printLetterHead ? '10mm' : '80mm'};\n  }\n`;\n\nconst labels: Array<string> = ['Name', 'Diagnosis', 'Procedure\\u202fdone'];\n\nexport const App = () => {\n  const date = new Date().toLocaleDateString('en-IN');\n  const [printLetterHead, setPrintLetterHead] = useState(false);\n  const [print, setPrint] = useState(false);\n\n  useEffect(() => {\n    if (print) {\n      setPrint(false);\n      window.print();\n    }\n  }, [print]);\n\n  return (\n    <>\n      <PrintButton\n        setPrintLetterHead={setPrintLetterHead}\n        setPrint={setPrint}\n      />\n      <LetterHead printLetterHead={printLetterHead} />\n      <OverallDiv printLetterHead={printLetterHead}>\n        <div style={{ textAlign: 'right' }}>Date: {date}</div>\n        <div>\n          {labels.map((name) => {\n            return <Label name={name} key={name} />;\n          })}\n        </div>\n        <div style={{ fontSize: '50px' }}>{'\\u211E'}</div>\n        <div>\n          <Prescription />\n        </div>\n        <div style={{ paddingTop: '50px' }}>\n          <Label name='Instructions' />\n        </div>\n      </OverallDiv>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}